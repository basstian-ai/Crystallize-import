"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  BulkCreateTopicInputSchema: () => BulkCreateTopicInputSchema,
  ComponentChoiceComponentConfigInputSchema: () => ComponentChoiceComponentConfigInputSchema,
  ContentChunkComponentConfigInputSchema: () => ContentChunkComponentConfigInputSchema,
  CreateChildTopicInputSchema: () => CreateChildTopicInputSchema,
  CreateDocumentInputSchema: () => CreateDocumentInputSchema,
  CreateFolderInputSchema: () => CreateFolderInputSchema,
  CreateProductInputSchema: () => CreateProductInputSchema,
  CreateProductVariantInputSchema: () => CreateProductVariantInputSchema,
  CreateShapeInputSchema: () => CreateShapeInputSchema,
  CreateTenantInputSchema: () => CreateTenantInputSchema,
  CreateTopicInputSchema: () => CreateTopicInputSchema,
  DateTimeSchema: () => DateTimeSchema,
  FileComponentConfigSchema: () => FileComponentConfigSchema,
  IdSchema: () => IdSchema,
  ItemRelationsComponentConfigSchema: () => ItemRelationsComponentConfigSchema,
  ItemSchema: () => ItemSchema,
  KeyValuePairInputSchema: () => KeyValuePairInputSchema,
  KeyValuePairSchema: () => KeyValuePairSchema,
  MAX_CHILD_COUNT: () => MAX_CHILD_COUNT,
  MinMaxComponentConfigSchema: () => MinMaxComponentConfigSchema,
  MinMaxItemRelationsComponentConfigSchema: () => MinMaxItemRelationsComponentConfigSchema,
  NumericComponentConfigSchema: () => NumericComponentConfigSchema,
  PriceVariantReferenceInputSchema: () => PriceVariantReferenceInputSchema,
  ProductPriceVariantSchema: () => ProductPriceVariantSchema,
  ProductSchema: () => ProductSchema,
  ProductVariantAttributeInputSchema: () => ProductVariantAttributeInputSchema,
  ProductVariantAttributeSchema: () => ProductVariantAttributeSchema,
  ProductVariantSchema: () => ProductVariantSchema,
  PropertiesTableComponentConfigSchema: () => PropertiesTableComponentConfigSchema,
  SelectionComponentConfigInputSchema: () => SelectionComponentConfigInputSchema,
  ShapeComponentConfigInputSchema: () => ShapeComponentConfigInputSchema,
  ShapeComponentConfigSchema: () => ShapeComponentConfigSchema,
  ShapeComponentInputSchema: () => ShapeComponentInputSchema,
  ShapeComponentSchema: () => ShapeComponentSchema,
  ShapeComponentTypeEnum: () => ShapeComponentTypeEnum,
  ShapeSchema: () => ShapeSchema,
  ShapeTypeEnum: () => ShapeTypeEnum,
  TenantDefaultsInputSchema: () => TenantDefaultsInputSchema,
  TenantDefaultsSchema: () => TenantDefaultsSchema,
  TenantSchema: () => TenantSchema,
  TopicSchema: () => TopicSchema,
  UpdateDocumentInputSchema: () => UpdateDocumentInputSchema,
  UpdateFolderInputSchema: () => UpdateFolderInputSchema,
  UpdateProductInputSchema: () => UpdateProductInputSchema,
  UpdateProductVariantInputSchema: () => UpdateProductVariantInputSchema,
  UpdateShapeInputSchema: () => UpdateShapeInputSchema,
  UpdateTopicInputSchema: () => UpdateTopicInputSchema,
  basicShapeSchema: () => basicShapeSchema
});
module.exports = __toCommonJS(src_exports);

// src/item/index.ts
var import_zod23 = require("zod");

// src/shape/index.ts
var import_zod4 = require("zod");

// src/shared/index.ts
var import_zod = require("zod");
var IdSchema = import_zod.z.string().min(24).max(24);
var KeyValuePairSchema = import_zod.z.record(import_zod.z.string());
var DateTimeSchema = import_zod.z.string().refine(
  (str) => Number.isInteger(Date.parse(str)),
  (str) => ({ message: `${str} is not a valid date` })
);
var KeyValuePairInputSchema = import_zod.z.object({
  key: import_zod.z.string().min(1),
  value: import_zod.z.string().optional()
});

// src/shape/components.ts
var import_zod3 = require("zod");

// src/shape/enums.ts
var import_zod2 = require("zod");
var ShapeTypeEnum = import_zod2.z.enum(["product", "document", "folder"]);
var ShapeComponentTypeEnum = import_zod2.z.enum([
  "boolean",
  "componentChoice",
  "contentChunk",
  "datetime",
  "gridRelations",
  "images",
  "itemRelations",
  "location",
  "numeric",
  "paragraphCollection",
  "propertiesTable",
  "richText",
  "selection",
  "singleLine",
  "videos",
  "files"
]);

// src/shape/components.ts
var minValueSchema = import_zod3.z.number().min(0).nullable().optional();
var maxValueSchema = import_zod3.z.number().min(0).nullable().optional();
var minMaxSchema = import_zod3.z.object({ min: minValueSchema, max: maxValueSchema });
var minMaxItemRelationsSchema = import_zod3.z.object({
  min: minValueSchema,
  max: maxValueSchema,
  minItems: minValueSchema,
  maxItems: maxValueSchema,
  minSkus: minValueSchema,
  maxSkus: maxValueSchema
});
var MinMaxComponentConfigSchema = minMaxSchema.transform(({ min, max }) => {
  const result = {};
  if (min !== null && min !== void 0) {
    result.min = min;
  }
  if (max !== null && max !== void 0) {
    result.max = max;
  }
  return result;
}).refine(
  ({ min, max }) => {
    if (typeof min === "number" && typeof max === "number") {
      if (min === max) {
        return true;
      }
      if (min > max) {
        return false;
      }
    }
    return true;
  },
  {
    message: "Min cannot be greater than max",
    path: ["min"]
  }
);
var MinMaxItemRelationsComponentConfigSchema = minMaxItemRelationsSchema.transform(({ min, max, minSkus, minItems, maxSkus, maxItems }) => {
  const result = {};
  if (min !== null && min !== void 0) {
    result.min = min;
  }
  if (minSkus !== null && minSkus !== void 0) {
    result.minSkus = minSkus;
  }
  if (minItems !== null && minItems !== void 0) {
    result.minItems = minItems;
  }
  if (max !== null && max !== void 0) {
    result.max = max;
  }
  if (maxSkus !== null && maxSkus !== void 0) {
    result.maxSkus = maxSkus;
  }
  if (maxItems !== null && maxItems !== void 0) {
    result.maxItems = maxItems;
  }
  return result;
}).refine(
  ({ min, max, minItems, maxItems, minSkus, maxSkus }) => {
    if (typeof min === "number" && typeof max === "number") {
      if (min === max) {
        return true;
      }
      if (min > max) {
        return false;
      }
    }
    if (typeof minItems === "number" && typeof maxItems === "number") {
      if (minItems === maxItems) {
        return true;
      }
      if (minItems > maxItems) {
        return false;
      }
    }
    if (typeof minSkus === "number" && typeof maxSkus === "number") {
      if (minSkus === maxSkus) {
        return true;
      }
      if (minSkus > maxSkus) {
        return false;
      }
    }
    return true;
  },
  {
    message: "Min cannot be greater than max",
    path: ["min"]
  }
);
var ComponentChoiceComponentConfigInputSchema = import_zod3.z.lazy(
  () => import_zod3.z.object({
    choices: import_zod3.z.array(ShapeComponentInputSchema)
  })
).refine(({ choices }) => !choices.find((cmp) => cmp.type === "componentChoice" || cmp.type === "contentChunk"), {
  message: 'Nesting "componentChoice" or "contentChunk" structural components is not allowed'
});
var ContentChunkComponentConfigInputSchema = import_zod3.z.lazy(
  () => import_zod3.z.object({
    components: import_zod3.z.array(ShapeComponentInputSchema),
    repeatable: import_zod3.z.coerce.boolean().default(false)
  })
).refine(
  ({ components }) => !components.find((cmp) => cmp.type === "componentChoice" || cmp.type === "contentChunk"),
  {
    message: 'Nesting "componentChoice" or "contentChunk" structural components is not allowed'
  }
);
var FileComponentConfigSchema = MinMaxComponentConfigSchema.and(
  import_zod3.z.object({
    acceptedContentTypes: import_zod3.z.array(
      import_zod3.z.object({
        contentType: import_zod3.z.string(),
        extensionLabel: import_zod3.z.string().optional().nullable()
      })
    ).optional().nullable(),
    maxFileSize: import_zod3.z.object({
      size: import_zod3.z.number(),
      unit: import_zod3.z.enum(["Bytes", "GiB", "KiB", "MiB"])
    })
  })
);
var ItemRelationsComponentConfigSchema = MinMaxItemRelationsComponentConfigSchema.and(
  import_zod3.z.object({
    acceptedShapeIdentifiers: import_zod3.z.array(import_zod3.z.string()).optional().nullable(),
    quickSelect: import_zod3.z.object({
      folders: import_zod3.z.array(import_zod3.z.object({ folderId: IdSchema })).optional().nullable()
    }).optional().nullable()
  })
).superRefine(({ max, min, minItems, maxItems, minSkus, maxSkus }, ctx) => {
  if (max && max > 50) {
    ctx.addIssue({
      code: import_zod3.z.ZodIssueCode.too_big,
      maximum: 50,
      type: "number",
      inclusive: true,
      message: "Max cannot be greater than 50"
    });
  }
  if (maxItems && maxItems > 50) {
    ctx.addIssue({
      code: import_zod3.z.ZodIssueCode.too_big,
      maximum: 50,
      type: "number",
      inclusive: true,
      message: "MaxItems cannot be greater than 50"
    });
  }
  if (maxSkus && maxSkus > 50) {
    ctx.addIssue({
      code: import_zod3.z.ZodIssueCode.too_big,
      maximum: 50,
      type: "number",
      inclusive: true,
      message: "MaxSkus cannot be greater than 50"
    });
  }
});
var NumericComponentConfigSchema = import_zod3.z.object({
  decimalPlaces: import_zod3.z.number().min(0).optional(),
  units: import_zod3.z.array(import_zod3.z.string()).optional()
});
var PropertiesTableComponentConfigSchema = import_zod3.z.object({
  sections: import_zod3.z.array(
    import_zod3.z.object({
      title: import_zod3.z.string().optional().nullable(),
      keys: import_zod3.z.array(import_zod3.z.string())
    })
  )
});
var SelectionComponentConfigInputSchema = MinMaxComponentConfigSchema.and(
  import_zod3.z.object({
    options: import_zod3.z.array(
      import_zod3.z.object({
        key: import_zod3.z.string().min(1),
        value: import_zod3.z.string().min(1),
        isPreselected: import_zod3.z.coerce.boolean().default(false)
      })
    ).optional().nullable()
  })
);
var ShapeComponentConfigInputSchema = import_zod3.z.object({
  componentChoice: ComponentChoiceComponentConfigInputSchema.optional(),
  contentChunk: ContentChunkComponentConfigInputSchema.optional(),
  files: FileComponentConfigSchema.optional(),
  itemRelations: ItemRelationsComponentConfigSchema.optional(),
  numeric: NumericComponentConfigSchema.optional(),
  propertiesTable: PropertiesTableComponentConfigSchema.optional(),
  selection: SelectionComponentConfigInputSchema.optional()
});
var ShapeComponentConfigSchema = ComponentChoiceComponentConfigInputSchema.or(
  ContentChunkComponentConfigInputSchema
).or(FileComponentConfigSchema).or(ItemRelationsComponentConfigSchema).or(NumericComponentConfigSchema).or(PropertiesTableComponentConfigSchema).or(SelectionComponentConfigInputSchema);
var ShapeComponentInputSchema = import_zod3.z.object({
  id: import_zod3.z.string().min(1),
  name: import_zod3.z.string().min(1),
  type: ShapeComponentTypeEnum,
  description: import_zod3.z.string().optional().nullable(),
  config: ShapeComponentConfigInputSchema.optional().nullable()
}).refine(
  ({ type, config }) => {
    if (!config) {
      return true;
    }
    return !Object.entries(config).find(([key, value]) => value && key !== type);
  },
  {
    message: "Incorrect config type provided on shape component"
  }
);
var ShapeComponentSchema = import_zod3.z.object({
  id: import_zod3.z.string().min(1),
  name: import_zod3.z.string().min(1),
  type: ShapeComponentTypeEnum,
  description: import_zod3.z.string().optional().nullable(),
  config: ShapeComponentConfigSchema.optional().nullable()
}).refine(
  ({ type, config }) => {
    if (!config) {
      return true;
    }
    return !Object.entries(config).find(([key, value]) => value && key !== type);
  },
  {
    message: "Incorrect config type provided on shape component"
  }
);

// src/shape/index.ts
var CreateShapeInputSchema = import_zod4.z.object({
  identifier: import_zod4.z.string().optional(),
  name: import_zod4.z.string().min(1),
  tenantId: IdSchema,
  type: ShapeTypeEnum,
  meta: KeyValuePairSchema.optional().nullable(),
  components: import_zod4.z.array(ShapeComponentInputSchema).optional().nullable(),
  variantComponents: import_zod4.z.array(ShapeComponentInputSchema).optional().nullable()
}).refine(
  ({ type, variantComponents }) => {
    if (type !== "product" && !!variantComponents) {
      return false;
    }
    return true;
  },
  ({ name, identifier }) => ({
    message: `[shape:${identifier || name}]: Only shapes of type product can have variantComponents`,
    path: ["variantComponents"]
  })
);
var UpdateShapeInputSchema = import_zod4.z.object({
  name: import_zod4.z.string().optional(),
  meta: import_zod4.z.record(import_zod4.z.string()).optional().nullable(),
  components: import_zod4.z.array(ShapeComponentInputSchema).optional().nullable(),
  variantComponents: import_zod4.z.array(ShapeComponentInputSchema).optional().nullable()
});
var basicShapeSchema = import_zod4.z.object({
  identifier: import_zod4.z.string().min(2).max(64),
  name: import_zod4.z.string().min(1),
  type: ShapeTypeEnum
});
var ShapeSchema = basicShapeSchema.extend({
  components: import_zod4.z.array(ShapeComponentSchema).optional(),
  variantComponents: import_zod4.z.array(ShapeComponentSchema).optional()
});

// src/topic/index.ts
var import_zod5 = require("zod");
var MAX_CHILD_COUNT = 100;
var validateChildren = (children2) => {
  if (!children2?.length) {
    return true;
  }
  const countChildren = (children3) => children3.reduce(
    (acc, child) => child.children?.length ? acc + 1 + countChildren(child.children) : acc + 1,
    0
  );
  return countChildren(children2) <= MAX_CHILD_COUNT;
};
var CreateChildTopicInputSchema = import_zod5.z.lazy(
  () => import_zod5.z.object({
    name: import_zod5.z.string().min(1),
    children: import_zod5.z.array(CreateChildTopicInputSchema).optional(),
    pathIdentifier: import_zod5.z.string().optional()
  })
);
var children = import_zod5.z.array(CreateChildTopicInputSchema).refine(validateChildren, {
  params: {
    code: "MAX_CHILD_COUNT"
  },
  message: `Cannot provide more than ${MAX_CHILD_COUNT} descendants in a topic mutation`
});
var BulkCreateTopicInputSchema = import_zod5.z.object({
  name: import_zod5.z.string().min(1),
  children: children.optional(),
  parentId: import_zod5.z.string().optional(),
  pathIdentifier: import_zod5.z.string().optional()
});
var CreateTopicInputSchema = import_zod5.z.object({
  name: import_zod5.z.string().min(1),
  children: children.optional(),
  parentId: import_zod5.z.string().optional(),
  pathIdentifier: import_zod5.z.string().optional(),
  tenantId: import_zod5.z.string().min(1)
});
var UpdateTopicInputSchema = import_zod5.z.object({
  name: import_zod5.z.string().optional(),
  parentId: import_zod5.z.string().optional(),
  pathIdentifier: import_zod5.z.string().optional()
});
var TopicSchema = import_zod5.z.lazy(
  () => import_zod5.z.object({
    language: import_zod5.z.string().optional(),
    id: import_zod5.z.string().optional(),
    parentId: import_zod5.z.string().optional(),
    name: import_zod5.z.string().min(1),
    pathIdentifier: import_zod5.z.string().optional(),
    children: import_zod5.z.array(TopicSchema).optional()
  })
);

// src/item/components/index.ts
var import_zod21 = require("zod");

// src/item/components/boolean/index.ts
var import_zod6 = require("zod");
var BooleanContentInputSchema = import_zod6.z.object({
  value: import_zod6.z.boolean()
});

// src/item/components/contentChunk/index.ts
var import_zod7 = require("zod");
var ContentChunkContentInputSchema = import_zod7.z.lazy(
  () => import_zod7.z.object({
    chunks: import_zod7.z.array(import_zod7.z.array(ComponentInputSchema).min(1)).min(1)
  })
);

// src/item/components/datetime/index.ts
var import_zod8 = require("zod");
var DatetimeContentInputSchema = import_zod8.z.object({
  datetime: DateTimeSchema
});

// src/item/components/files/index.ts
var import_zod9 = require("zod");
var FileInputSchema = import_zod9.z.object({
  key: import_zod9.z.string().min(1),
  title: import_zod9.z.string().optional()
});

// src/item/components/gridRelations/index.ts
var import_zod10 = require("zod");
var GridRelationsContentInputSchema = import_zod10.z.object({
  gridIds: import_zod10.z.array(IdSchema).optional()
});

// src/item/components/images/index.ts
var import_zod12 = require("zod");

// src/item/components/richText/index.ts
var import_zod11 = require("zod");
var RichTextContentInputSchema = import_zod11.z.object({
  html: import_zod11.z.array(import_zod11.z.string()).optional(),
  json: import_zod11.z.array(import_zod11.z.string()).optional()
}).refine(
  ({ json }) => {
    if (!json?.length) {
      return true;
    }
    try {
      json?.map((str) => JSON.parse(str));
      return true;
    } catch (err) {
      return false;
    }
  },
  {
    message: "Invalid json provided to rich text content input"
  }
);

// src/item/components/images/index.ts
var ImageInputSchema = import_zod12.z.object({
  key: import_zod12.z.string().min(1),
  caption: RichTextContentInputSchema.optional(),
  altText: import_zod12.z.string().optional(),
  mimeType: import_zod12.z.string().optional(),
  meta: import_zod12.z.array(KeyValuePairInputSchema).optional()
});

// src/item/components/itemRelations/index.ts
var import_zod13 = require("zod");
var ItemRelationsContentInputSchema = import_zod13.z.object({
  itemIds: import_zod13.z.array(IdSchema).optional(),
  skus: import_zod13.z.array(import_zod13.z.string()).optional()
});

// src/item/components/location/index.ts
var import_zod14 = require("zod");
var LocationContentInputSchema = import_zod14.z.object({
  lat: import_zod14.z.number().optional(),
  long: import_zod14.z.number().optional()
});

// src/item/components/numeric/index.ts
var import_zod15 = require("zod");
var NumericComponentContentInputSchema = import_zod15.z.object({
  number: import_zod15.z.number(),
  unit: import_zod15.z.string().optional()
});

// src/item/components/paragraphCollection/index.ts
var import_zod18 = require("zod");

// src/item/components/singleLine/index.ts
var import_zod16 = require("zod");
var SingleLineContentInputSchema = import_zod16.z.object({
  text: import_zod16.z.string().optional()
});

// src/item/components/videos/index.ts
var import_zod17 = require("zod");
var VideoInputSchema = import_zod17.z.object({
  key: import_zod17.z.string().min(1),
  thumbnails: import_zod17.z.array(ImageInputSchema).optional(),
  title: import_zod17.z.string().optional()
});

// src/item/components/paragraphCollection/index.ts
var ParagraphInputSchema = import_zod18.z.object({
  body: RichTextContentInputSchema.optional(),
  images: import_zod18.z.array(ImageInputSchema).optional(),
  title: SingleLineContentInputSchema.optional(),
  videos: import_zod18.z.array(VideoInputSchema).optional()
});
var ParagraphCollectionContentInputSchema = import_zod18.z.object({
  paragraphs: import_zod18.z.array(ParagraphInputSchema).optional()
});

// src/item/components/propertiesTable/index.ts
var import_zod19 = require("zod");
var PropertiesTableComponentSectionInputSchema = import_zod19.z.object({
  properties: import_zod19.z.array(KeyValuePairInputSchema).optional(),
  title: import_zod19.z.string().optional()
});
var PropertiesTableContentInputSchema = import_zod19.z.object({
  sections: import_zod19.z.array(PropertiesTableComponentSectionInputSchema).optional()
});

// src/item/components/selection/index.ts
var import_zod20 = require("zod");
var SelectionComponentContentInputSchema = import_zod20.z.object({
  keys: import_zod20.z.array(import_zod20.z.string())
});

// src/item/components/index.ts
var ComponentInputSchema = import_zod21.z.lazy(
  () => import_zod21.z.object({
    componentId: import_zod21.z.string().min(1),
    files: import_zod21.z.array(FileInputSchema).optional(),
    images: import_zod21.z.array(ImageInputSchema).optional(),
    videos: import_zod21.z.array(VideoInputSchema).optional(),
    componentChoice: ComponentInputSchema.optional(),
    contentChunk: ContentChunkContentInputSchema.optional(),
    boolean: BooleanContentInputSchema.optional(),
    datetime: DatetimeContentInputSchema.optional(),
    gridRelations: GridRelationsContentInputSchema.optional(),
    itemRelations: ItemRelationsContentInputSchema.optional(),
    location: LocationContentInputSchema.optional(),
    numeric: NumericComponentContentInputSchema.optional(),
    paragraphCollection: ParagraphCollectionContentInputSchema.optional(),
    propertiesTable: PropertiesTableContentInputSchema.optional(),
    richText: RichTextContentInputSchema.optional(),
    selection: SelectionComponentContentInputSchema.optional(),
    singleLine: SingleLineContentInputSchema.optional()
  })
);

// src/item/enums.ts
var import_zod22 = require("zod");
var ItemTypeEnum = import_zod22.z.enum(["product", "document", "folder"]);

// src/item/index.ts
var ProductVariantAttributeSchema = import_zod23.z.object({
  attribute: import_zod23.z.string().min(1),
  value: import_zod23.z.string().min(1)
});
var ProductPriceVariantSchema = import_zod23.z.object({
  identifier: import_zod23.z.string().min(1),
  currency: import_zod23.z.string().optional(),
  name: import_zod23.z.string().optional(),
  price: import_zod23.z.number().optional()
});
var ProductVariantSchema = import_zod23.z.object({
  isDefault: import_zod23.z.boolean().default(false),
  sku: import_zod23.z.string().min(1),
  name: import_zod23.z.string().min(1),
  externalReference: import_zod23.z.string().optional(),
  attributes: import_zod23.z.array(ProductVariantAttributeSchema).optional(),
  price: import_zod23.z.number().optional(),
  priceVariants: import_zod23.z.array(ProductPriceVariantSchema).optional(),
  stock: import_zod23.z.number().optional(),
  components: import_zod23.z.array(import_zod23.z.any()).optional()
});
var ItemSchema = import_zod23.z.lazy(
  () => import_zod23.z.object({
    id: IdSchema,
    tenantId: IdSchema,
    language: import_zod23.z.string().min(1),
    createdAt: DateTimeSchema.optional(),
    updatedAt: DateTimeSchema.optional(),
    type: ItemTypeEnum,
    name: import_zod23.z.string().optional(),
    externalReference: import_zod23.z.string().optional(),
    components: import_zod23.z.array(import_zod23.z.any()).optional(),
    shape: basicShapeSchema.optional(),
    topics: import_zod23.z.array(TopicSchema).optional(),
    relatingItems: import_zod23.z.array(ItemSchema).optional(),
    tree: import_zod23.z.object({
      path: import_zod23.z.string().optional()
    }).optional()
  })
);
var ProductSchema = ItemSchema.and(
  import_zod23.z.object({
    variants: import_zod23.z.array(ProductVariantSchema).optional()
  })
);
var createItemInputSchema = import_zod23.z.object({
  tenantId: IdSchema,
  name: import_zod23.z.string().min(1),
  shapeIdentifier: import_zod23.z.string().min(1),
  createdAt: DateTimeSchema.optional(),
  externalReference: import_zod23.z.string().optional(),
  components: import_zod23.z.array(ComponentInputSchema).optional(),
  topicIds: import_zod23.z.array(IdSchema).optional(),
  tree: import_zod23.z.object({
    parentId: IdSchema,
    position: import_zod23.z.number().positive().optional()
  })
});
var updateItemInputSchema = import_zod23.z.object({
  name: import_zod23.z.string().optional(),
  createdAt: DateTimeSchema.optional(),
  externalReference: import_zod23.z.string().optional(),
  components: import_zod23.z.array(ComponentInputSchema).optional(),
  topicIds: import_zod23.z.array(IdSchema).optional()
});
var ProductVariantAttributeInputSchema = import_zod23.z.object({
  attribute: import_zod23.z.string().min(1),
  value: import_zod23.z.string().min(1)
});
var PriceVariantReferenceInputSchema = import_zod23.z.object({
  identifier: import_zod23.z.string().min(1),
  price: import_zod23.z.number()
});
var CreateProductVariantInputSchema = import_zod23.z.object({
  isDefault: import_zod23.z.boolean(),
  sku: import_zod23.z.string().min(1),
  name: import_zod23.z.string().optional(),
  price: import_zod23.z.number().optional(),
  priceVariants: import_zod23.z.array(PriceVariantReferenceInputSchema).optional(),
  stock: import_zod23.z.number().optional(),
  attributes: import_zod23.z.array(ProductVariantAttributeInputSchema).optional(),
  components: import_zod23.z.array(ComponentInputSchema).optional(),
  externalReference: import_zod23.z.string().optional()
});
var UpdateProductVariantInputSchema = import_zod23.z.object({
  isDefault: import_zod23.z.boolean().optional(),
  sku: import_zod23.z.string().optional(),
  name: import_zod23.z.string().optional(),
  price: import_zod23.z.number().optional(),
  priceVariants: import_zod23.z.array(PriceVariantReferenceInputSchema).optional(),
  stock: import_zod23.z.number().optional(),
  attributes: import_zod23.z.array(ProductVariantAttributeInputSchema).optional(),
  components: import_zod23.z.array(ComponentInputSchema).optional(),
  externalReference: import_zod23.z.string().optional()
});
var CreateDocumentInputSchema = createItemInputSchema;
var CreateFolderInputSchema = createItemInputSchema;
var CreateProductInputSchema = createItemInputSchema.extend({
  variants: import_zod23.z.array(CreateProductVariantInputSchema).min(1),
  vatTypeId: IdSchema
});
var UpdateDocumentInputSchema = updateItemInputSchema;
var UpdateFolderInputSchema = updateItemInputSchema;
var UpdateProductInputSchema = updateItemInputSchema.extend({
  variants: import_zod23.z.array(UpdateProductVariantInputSchema).optional(),
  vatTypeId: IdSchema.optional()
});

// src/tenant/index.ts
var import_zod24 = require("zod");
var TenantDefaultsInputSchema = import_zod24.z.object({
  currency: import_zod24.z.string().optional(),
  language: import_zod24.z.string().optional()
});
var CreateTenantInputSchema = import_zod24.z.object({
  identifier: import_zod24.z.string().min(1),
  name: import_zod24.z.string().min(1),
  defaults: TenantDefaultsInputSchema.optional(),
  shapes: import_zod24.z.array(CreateShapeInputSchema).optional()
});
var TenantDefaultsSchema = import_zod24.z.object({
  currency: import_zod24.z.string().min(1),
  language: import_zod24.z.string().min(1)
});
var TenantSchema = import_zod24.z.object({
  id: IdSchema,
  identifier: import_zod24.z.string().min(1),
  name: import_zod24.z.string().min(1),
  defaults: TenantDefaultsSchema,
  shapes: import_zod24.z.array(ShapeSchema).optional()
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BulkCreateTopicInputSchema,
  ComponentChoiceComponentConfigInputSchema,
  ContentChunkComponentConfigInputSchema,
  CreateChildTopicInputSchema,
  CreateDocumentInputSchema,
  CreateFolderInputSchema,
  CreateProductInputSchema,
  CreateProductVariantInputSchema,
  CreateShapeInputSchema,
  CreateTenantInputSchema,
  CreateTopicInputSchema,
  DateTimeSchema,
  FileComponentConfigSchema,
  IdSchema,
  ItemRelationsComponentConfigSchema,
  ItemSchema,
  KeyValuePairInputSchema,
  KeyValuePairSchema,
  MAX_CHILD_COUNT,
  MinMaxComponentConfigSchema,
  MinMaxItemRelationsComponentConfigSchema,
  NumericComponentConfigSchema,
  PriceVariantReferenceInputSchema,
  ProductPriceVariantSchema,
  ProductSchema,
  ProductVariantAttributeInputSchema,
  ProductVariantAttributeSchema,
  ProductVariantSchema,
  PropertiesTableComponentConfigSchema,
  SelectionComponentConfigInputSchema,
  ShapeComponentConfigInputSchema,
  ShapeComponentConfigSchema,
  ShapeComponentInputSchema,
  ShapeComponentSchema,
  ShapeComponentTypeEnum,
  ShapeSchema,
  ShapeTypeEnum,
  TenantDefaultsInputSchema,
  TenantDefaultsSchema,
  TenantSchema,
  TopicSchema,
  UpdateDocumentInputSchema,
  UpdateFolderInputSchema,
  UpdateProductInputSchema,
  UpdateProductVariantInputSchema,
  UpdateShapeInputSchema,
  UpdateTopicInputSchema,
  basicShapeSchema
});
