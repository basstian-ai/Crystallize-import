// src/item/index.ts
import { z as z23 } from "zod";

// src/shape/index.ts
import { z as z4 } from "zod";

// src/shared/index.ts
import { z } from "zod";
var IdSchema = z.string().min(24).max(24);
var KeyValuePairSchema = z.record(z.string());
var DateTimeSchema = z.string().refine(
  (str) => Number.isInteger(Date.parse(str)),
  (str) => ({ message: `${str} is not a valid date` })
);
var KeyValuePairInputSchema = z.object({
  key: z.string().min(1),
  value: z.string().optional()
});

// src/shape/components.ts
import { z as z3 } from "zod";

// src/shape/enums.ts
import { z as z2 } from "zod";
var ShapeTypeEnum = z2.enum(["product", "document", "folder"]);
var ShapeComponentTypeEnum = z2.enum([
  "boolean",
  "componentChoice",
  "contentChunk",
  "datetime",
  "gridRelations",
  "images",
  "itemRelations",
  "location",
  "numeric",
  "paragraphCollection",
  "propertiesTable",
  "richText",
  "selection",
  "singleLine",
  "videos",
  "files"
]);

// src/shape/components.ts
var minValueSchema = z3.number().min(0).nullable().optional();
var maxValueSchema = z3.number().min(0).nullable().optional();
var minMaxSchema = z3.object({ min: minValueSchema, max: maxValueSchema });
var minMaxItemRelationsSchema = z3.object({
  min: minValueSchema,
  max: maxValueSchema,
  minItems: minValueSchema,
  maxItems: maxValueSchema,
  minSkus: minValueSchema,
  maxSkus: maxValueSchema
});
var MinMaxComponentConfigSchema = minMaxSchema.transform(({ min, max }) => {
  const result = {};
  if (min !== null && min !== void 0) {
    result.min = min;
  }
  if (max !== null && max !== void 0) {
    result.max = max;
  }
  return result;
}).refine(
  ({ min, max }) => {
    if (typeof min === "number" && typeof max === "number") {
      if (min === max) {
        return true;
      }
      if (min > max) {
        return false;
      }
    }
    return true;
  },
  {
    message: "Min cannot be greater than max",
    path: ["min"]
  }
);
var MinMaxItemRelationsComponentConfigSchema = minMaxItemRelationsSchema.transform(({ min, max, minSkus, minItems, maxSkus, maxItems }) => {
  const result = {};
  if (min !== null && min !== void 0) {
    result.min = min;
  }
  if (minSkus !== null && minSkus !== void 0) {
    result.minSkus = minSkus;
  }
  if (minItems !== null && minItems !== void 0) {
    result.minItems = minItems;
  }
  if (max !== null && max !== void 0) {
    result.max = max;
  }
  if (maxSkus !== null && maxSkus !== void 0) {
    result.maxSkus = maxSkus;
  }
  if (maxItems !== null && maxItems !== void 0) {
    result.maxItems = maxItems;
  }
  return result;
}).refine(
  ({ min, max, minItems, maxItems, minSkus, maxSkus }) => {
    if (typeof min === "number" && typeof max === "number") {
      if (min === max) {
        return true;
      }
      if (min > max) {
        return false;
      }
    }
    if (typeof minItems === "number" && typeof maxItems === "number") {
      if (minItems === maxItems) {
        return true;
      }
      if (minItems > maxItems) {
        return false;
      }
    }
    if (typeof minSkus === "number" && typeof maxSkus === "number") {
      if (minSkus === maxSkus) {
        return true;
      }
      if (minSkus > maxSkus) {
        return false;
      }
    }
    return true;
  },
  {
    message: "Min cannot be greater than max",
    path: ["min"]
  }
);
var ComponentChoiceComponentConfigInputSchema = z3.lazy(
  () => z3.object({
    choices: z3.array(ShapeComponentInputSchema)
  })
).refine(({ choices }) => !choices.find((cmp) => cmp.type === "componentChoice" || cmp.type === "contentChunk"), {
  message: 'Nesting "componentChoice" or "contentChunk" structural components is not allowed'
});
var ContentChunkComponentConfigInputSchema = z3.lazy(
  () => z3.object({
    components: z3.array(ShapeComponentInputSchema),
    repeatable: z3.coerce.boolean().default(false)
  })
).refine(
  ({ components }) => !components.find((cmp) => cmp.type === "componentChoice" || cmp.type === "contentChunk"),
  {
    message: 'Nesting "componentChoice" or "contentChunk" structural components is not allowed'
  }
);
var FileComponentConfigSchema = MinMaxComponentConfigSchema.and(
  z3.object({
    acceptedContentTypes: z3.array(
      z3.object({
        contentType: z3.string(),
        extensionLabel: z3.string().optional().nullable()
      })
    ).optional().nullable(),
    maxFileSize: z3.object({
      size: z3.number(),
      unit: z3.enum(["Bytes", "GiB", "KiB", "MiB"])
    })
  })
);
var ItemRelationsComponentConfigSchema = MinMaxItemRelationsComponentConfigSchema.and(
  z3.object({
    acceptedShapeIdentifiers: z3.array(z3.string()).optional().nullable(),
    quickSelect: z3.object({
      folders: z3.array(z3.object({ folderId: IdSchema })).optional().nullable()
    }).optional().nullable()
  })
).superRefine(({ max, min, minItems, maxItems, minSkus, maxSkus }, ctx) => {
  if (max && max > 50) {
    ctx.addIssue({
      code: z3.ZodIssueCode.too_big,
      maximum: 50,
      type: "number",
      inclusive: true,
      message: "Max cannot be greater than 50"
    });
  }
  if (maxItems && maxItems > 50) {
    ctx.addIssue({
      code: z3.ZodIssueCode.too_big,
      maximum: 50,
      type: "number",
      inclusive: true,
      message: "MaxItems cannot be greater than 50"
    });
  }
  if (maxSkus && maxSkus > 50) {
    ctx.addIssue({
      code: z3.ZodIssueCode.too_big,
      maximum: 50,
      type: "number",
      inclusive: true,
      message: "MaxSkus cannot be greater than 50"
    });
  }
});
var NumericComponentConfigSchema = z3.object({
  decimalPlaces: z3.number().min(0).optional(),
  units: z3.array(z3.string()).optional()
});
var PropertiesTableComponentConfigSchema = z3.object({
  sections: z3.array(
    z3.object({
      title: z3.string().optional().nullable(),
      keys: z3.array(z3.string())
    })
  )
});
var SelectionComponentConfigInputSchema = MinMaxComponentConfigSchema.and(
  z3.object({
    options: z3.array(
      z3.object({
        key: z3.string().min(1),
        value: z3.string().min(1),
        isPreselected: z3.coerce.boolean().default(false)
      })
    ).optional().nullable()
  })
);
var ShapeComponentConfigInputSchema = z3.object({
  componentChoice: ComponentChoiceComponentConfigInputSchema.optional(),
  contentChunk: ContentChunkComponentConfigInputSchema.optional(),
  files: FileComponentConfigSchema.optional(),
  itemRelations: ItemRelationsComponentConfigSchema.optional(),
  numeric: NumericComponentConfigSchema.optional(),
  propertiesTable: PropertiesTableComponentConfigSchema.optional(),
  selection: SelectionComponentConfigInputSchema.optional()
});
var ShapeComponentConfigSchema = ComponentChoiceComponentConfigInputSchema.or(
  ContentChunkComponentConfigInputSchema
).or(FileComponentConfigSchema).or(ItemRelationsComponentConfigSchema).or(NumericComponentConfigSchema).or(PropertiesTableComponentConfigSchema).or(SelectionComponentConfigInputSchema);
var ShapeComponentInputSchema = z3.object({
  id: z3.string().min(1),
  name: z3.string().min(1),
  type: ShapeComponentTypeEnum,
  description: z3.string().optional().nullable(),
  config: ShapeComponentConfigInputSchema.optional().nullable()
}).refine(
  ({ type, config }) => {
    if (!config) {
      return true;
    }
    return !Object.entries(config).find(([key, value]) => value && key !== type);
  },
  {
    message: "Incorrect config type provided on shape component"
  }
);
var ShapeComponentSchema = z3.object({
  id: z3.string().min(1),
  name: z3.string().min(1),
  type: ShapeComponentTypeEnum,
  description: z3.string().optional().nullable(),
  config: ShapeComponentConfigSchema.optional().nullable()
}).refine(
  ({ type, config }) => {
    if (!config) {
      return true;
    }
    return !Object.entries(config).find(([key, value]) => value && key !== type);
  },
  {
    message: "Incorrect config type provided on shape component"
  }
);

// src/shape/index.ts
var CreateShapeInputSchema = z4.object({
  identifier: z4.string().optional(),
  name: z4.string().min(1),
  tenantId: IdSchema,
  type: ShapeTypeEnum,
  meta: KeyValuePairSchema.optional().nullable(),
  components: z4.array(ShapeComponentInputSchema).optional().nullable(),
  variantComponents: z4.array(ShapeComponentInputSchema).optional().nullable()
}).refine(
  ({ type, variantComponents }) => {
    if (type !== "product" && !!variantComponents) {
      return false;
    }
    return true;
  },
  ({ name, identifier }) => ({
    message: `[shape:${identifier || name}]: Only shapes of type product can have variantComponents`,
    path: ["variantComponents"]
  })
);
var UpdateShapeInputSchema = z4.object({
  name: z4.string().optional(),
  meta: z4.record(z4.string()).optional().nullable(),
  components: z4.array(ShapeComponentInputSchema).optional().nullable(),
  variantComponents: z4.array(ShapeComponentInputSchema).optional().nullable()
});
var basicShapeSchema = z4.object({
  identifier: z4.string().min(2).max(64),
  name: z4.string().min(1),
  type: ShapeTypeEnum
});
var ShapeSchema = basicShapeSchema.extend({
  components: z4.array(ShapeComponentSchema).optional(),
  variantComponents: z4.array(ShapeComponentSchema).optional()
});

// src/topic/index.ts
import { z as z5 } from "zod";
var MAX_CHILD_COUNT = 100;
var validateChildren = (children2) => {
  if (!children2?.length) {
    return true;
  }
  const countChildren = (children3) => children3.reduce(
    (acc, child) => child.children?.length ? acc + 1 + countChildren(child.children) : acc + 1,
    0
  );
  return countChildren(children2) <= MAX_CHILD_COUNT;
};
var CreateChildTopicInputSchema = z5.lazy(
  () => z5.object({
    name: z5.string().min(1),
    children: z5.array(CreateChildTopicInputSchema).optional(),
    pathIdentifier: z5.string().optional()
  })
);
var children = z5.array(CreateChildTopicInputSchema).refine(validateChildren, {
  params: {
    code: "MAX_CHILD_COUNT"
  },
  message: `Cannot provide more than ${MAX_CHILD_COUNT} descendants in a topic mutation`
});
var BulkCreateTopicInputSchema = z5.object({
  name: z5.string().min(1),
  children: children.optional(),
  parentId: z5.string().optional(),
  pathIdentifier: z5.string().optional()
});
var CreateTopicInputSchema = z5.object({
  name: z5.string().min(1),
  children: children.optional(),
  parentId: z5.string().optional(),
  pathIdentifier: z5.string().optional(),
  tenantId: z5.string().min(1)
});
var UpdateTopicInputSchema = z5.object({
  name: z5.string().optional(),
  parentId: z5.string().optional(),
  pathIdentifier: z5.string().optional()
});
var TopicSchema = z5.lazy(
  () => z5.object({
    language: z5.string().optional(),
    id: z5.string().optional(),
    parentId: z5.string().optional(),
    name: z5.string().min(1),
    pathIdentifier: z5.string().optional(),
    children: z5.array(TopicSchema).optional()
  })
);

// src/item/components/index.ts
import { z as z21 } from "zod";

// src/item/components/boolean/index.ts
import { z as z6 } from "zod";
var BooleanContentInputSchema = z6.object({
  value: z6.boolean()
});

// src/item/components/contentChunk/index.ts
import { z as z7 } from "zod";
var ContentChunkContentInputSchema = z7.lazy(
  () => z7.object({
    chunks: z7.array(z7.array(ComponentInputSchema).min(1)).min(1)
  })
);

// src/item/components/datetime/index.ts
import { z as z8 } from "zod";
var DatetimeContentInputSchema = z8.object({
  datetime: DateTimeSchema
});

// src/item/components/files/index.ts
import { z as z9 } from "zod";
var FileInputSchema = z9.object({
  key: z9.string().min(1),
  title: z9.string().optional()
});

// src/item/components/gridRelations/index.ts
import { z as z10 } from "zod";
var GridRelationsContentInputSchema = z10.object({
  gridIds: z10.array(IdSchema).optional()
});

// src/item/components/images/index.ts
import { z as z12 } from "zod";

// src/item/components/richText/index.ts
import { z as z11 } from "zod";
var RichTextContentInputSchema = z11.object({
  html: z11.array(z11.string()).optional(),
  json: z11.array(z11.string()).optional()
}).refine(
  ({ json }) => {
    if (!json?.length) {
      return true;
    }
    try {
      json?.map((str) => JSON.parse(str));
      return true;
    } catch (err) {
      return false;
    }
  },
  {
    message: "Invalid json provided to rich text content input"
  }
);

// src/item/components/images/index.ts
var ImageInputSchema = z12.object({
  key: z12.string().min(1),
  caption: RichTextContentInputSchema.optional(),
  altText: z12.string().optional(),
  mimeType: z12.string().optional(),
  meta: z12.array(KeyValuePairInputSchema).optional()
});

// src/item/components/itemRelations/index.ts
import { z as z13 } from "zod";
var ItemRelationsContentInputSchema = z13.object({
  itemIds: z13.array(IdSchema).optional(),
  skus: z13.array(z13.string()).optional()
});

// src/item/components/location/index.ts
import { z as z14 } from "zod";
var LocationContentInputSchema = z14.object({
  lat: z14.number().optional(),
  long: z14.number().optional()
});

// src/item/components/numeric/index.ts
import { z as z15 } from "zod";
var NumericComponentContentInputSchema = z15.object({
  number: z15.number(),
  unit: z15.string().optional()
});

// src/item/components/paragraphCollection/index.ts
import { z as z18 } from "zod";

// src/item/components/singleLine/index.ts
import { z as z16 } from "zod";
var SingleLineContentInputSchema = z16.object({
  text: z16.string().optional()
});

// src/item/components/videos/index.ts
import { z as z17 } from "zod";
var VideoInputSchema = z17.object({
  key: z17.string().min(1),
  thumbnails: z17.array(ImageInputSchema).optional(),
  title: z17.string().optional()
});

// src/item/components/paragraphCollection/index.ts
var ParagraphInputSchema = z18.object({
  body: RichTextContentInputSchema.optional(),
  images: z18.array(ImageInputSchema).optional(),
  title: SingleLineContentInputSchema.optional(),
  videos: z18.array(VideoInputSchema).optional()
});
var ParagraphCollectionContentInputSchema = z18.object({
  paragraphs: z18.array(ParagraphInputSchema).optional()
});

// src/item/components/propertiesTable/index.ts
import { z as z19 } from "zod";
var PropertiesTableComponentSectionInputSchema = z19.object({
  properties: z19.array(KeyValuePairInputSchema).optional(),
  title: z19.string().optional()
});
var PropertiesTableContentInputSchema = z19.object({
  sections: z19.array(PropertiesTableComponentSectionInputSchema).optional()
});

// src/item/components/selection/index.ts
import { z as z20 } from "zod";
var SelectionComponentContentInputSchema = z20.object({
  keys: z20.array(z20.string())
});

// src/item/components/index.ts
var ComponentInputSchema = z21.lazy(
  () => z21.object({
    componentId: z21.string().min(1),
    files: z21.array(FileInputSchema).optional(),
    images: z21.array(ImageInputSchema).optional(),
    videos: z21.array(VideoInputSchema).optional(),
    componentChoice: ComponentInputSchema.optional(),
    contentChunk: ContentChunkContentInputSchema.optional(),
    boolean: BooleanContentInputSchema.optional(),
    datetime: DatetimeContentInputSchema.optional(),
    gridRelations: GridRelationsContentInputSchema.optional(),
    itemRelations: ItemRelationsContentInputSchema.optional(),
    location: LocationContentInputSchema.optional(),
    numeric: NumericComponentContentInputSchema.optional(),
    paragraphCollection: ParagraphCollectionContentInputSchema.optional(),
    propertiesTable: PropertiesTableContentInputSchema.optional(),
    richText: RichTextContentInputSchema.optional(),
    selection: SelectionComponentContentInputSchema.optional(),
    singleLine: SingleLineContentInputSchema.optional()
  })
);

// src/item/enums.ts
import { z as z22 } from "zod";
var ItemTypeEnum = z22.enum(["product", "document", "folder"]);

// src/item/index.ts
var ProductVariantAttributeSchema = z23.object({
  attribute: z23.string().min(1),
  value: z23.string().min(1)
});
var ProductPriceVariantSchema = z23.object({
  identifier: z23.string().min(1),
  currency: z23.string().optional(),
  name: z23.string().optional(),
  price: z23.number().optional()
});
var ProductVariantSchema = z23.object({
  isDefault: z23.boolean().default(false),
  sku: z23.string().min(1),
  name: z23.string().min(1),
  externalReference: z23.string().optional(),
  attributes: z23.array(ProductVariantAttributeSchema).optional(),
  price: z23.number().optional(),
  priceVariants: z23.array(ProductPriceVariantSchema).optional(),
  stock: z23.number().optional(),
  components: z23.array(z23.any()).optional()
});
var ItemSchema = z23.lazy(
  () => z23.object({
    id: IdSchema,
    tenantId: IdSchema,
    language: z23.string().min(1),
    createdAt: DateTimeSchema.optional(),
    updatedAt: DateTimeSchema.optional(),
    type: ItemTypeEnum,
    name: z23.string().optional(),
    externalReference: z23.string().optional(),
    components: z23.array(z23.any()).optional(),
    shape: basicShapeSchema.optional(),
    topics: z23.array(TopicSchema).optional(),
    relatingItems: z23.array(ItemSchema).optional(),
    tree: z23.object({
      path: z23.string().optional()
    }).optional()
  })
);
var ProductSchema = ItemSchema.and(
  z23.object({
    variants: z23.array(ProductVariantSchema).optional()
  })
);
var createItemInputSchema = z23.object({
  tenantId: IdSchema,
  name: z23.string().min(1),
  shapeIdentifier: z23.string().min(1),
  createdAt: DateTimeSchema.optional(),
  externalReference: z23.string().optional(),
  components: z23.array(ComponentInputSchema).optional(),
  topicIds: z23.array(IdSchema).optional(),
  tree: z23.object({
    parentId: IdSchema,
    position: z23.number().positive().optional()
  })
});
var updateItemInputSchema = z23.object({
  name: z23.string().optional(),
  createdAt: DateTimeSchema.optional(),
  externalReference: z23.string().optional(),
  components: z23.array(ComponentInputSchema).optional(),
  topicIds: z23.array(IdSchema).optional()
});
var ProductVariantAttributeInputSchema = z23.object({
  attribute: z23.string().min(1),
  value: z23.string().min(1)
});
var PriceVariantReferenceInputSchema = z23.object({
  identifier: z23.string().min(1),
  price: z23.number()
});
var CreateProductVariantInputSchema = z23.object({
  isDefault: z23.boolean(),
  sku: z23.string().min(1),
  name: z23.string().optional(),
  price: z23.number().optional(),
  priceVariants: z23.array(PriceVariantReferenceInputSchema).optional(),
  stock: z23.number().optional(),
  attributes: z23.array(ProductVariantAttributeInputSchema).optional(),
  components: z23.array(ComponentInputSchema).optional(),
  externalReference: z23.string().optional()
});
var UpdateProductVariantInputSchema = z23.object({
  isDefault: z23.boolean().optional(),
  sku: z23.string().optional(),
  name: z23.string().optional(),
  price: z23.number().optional(),
  priceVariants: z23.array(PriceVariantReferenceInputSchema).optional(),
  stock: z23.number().optional(),
  attributes: z23.array(ProductVariantAttributeInputSchema).optional(),
  components: z23.array(ComponentInputSchema).optional(),
  externalReference: z23.string().optional()
});
var CreateDocumentInputSchema = createItemInputSchema;
var CreateFolderInputSchema = createItemInputSchema;
var CreateProductInputSchema = createItemInputSchema.extend({
  variants: z23.array(CreateProductVariantInputSchema).min(1),
  vatTypeId: IdSchema
});
var UpdateDocumentInputSchema = updateItemInputSchema;
var UpdateFolderInputSchema = updateItemInputSchema;
var UpdateProductInputSchema = updateItemInputSchema.extend({
  variants: z23.array(UpdateProductVariantInputSchema).optional(),
  vatTypeId: IdSchema.optional()
});

// src/tenant/index.ts
import { z as z24 } from "zod";
var TenantDefaultsInputSchema = z24.object({
  currency: z24.string().optional(),
  language: z24.string().optional()
});
var CreateTenantInputSchema = z24.object({
  identifier: z24.string().min(1),
  name: z24.string().min(1),
  defaults: TenantDefaultsInputSchema.optional(),
  shapes: z24.array(CreateShapeInputSchema).optional()
});
var TenantDefaultsSchema = z24.object({
  currency: z24.string().min(1),
  language: z24.string().min(1)
});
var TenantSchema = z24.object({
  id: IdSchema,
  identifier: z24.string().min(1),
  name: z24.string().min(1),
  defaults: TenantDefaultsSchema,
  shapes: z24.array(ShapeSchema).optional()
});
export {
  BulkCreateTopicInputSchema,
  ComponentChoiceComponentConfigInputSchema,
  ContentChunkComponentConfigInputSchema,
  CreateChildTopicInputSchema,
  CreateDocumentInputSchema,
  CreateFolderInputSchema,
  CreateProductInputSchema,
  CreateProductVariantInputSchema,
  CreateShapeInputSchema,
  CreateTenantInputSchema,
  CreateTopicInputSchema,
  DateTimeSchema,
  FileComponentConfigSchema,
  IdSchema,
  ItemRelationsComponentConfigSchema,
  ItemSchema,
  KeyValuePairInputSchema,
  KeyValuePairSchema,
  MAX_CHILD_COUNT,
  MinMaxComponentConfigSchema,
  MinMaxItemRelationsComponentConfigSchema,
  NumericComponentConfigSchema,
  PriceVariantReferenceInputSchema,
  ProductPriceVariantSchema,
  ProductSchema,
  ProductVariantAttributeInputSchema,
  ProductVariantAttributeSchema,
  ProductVariantSchema,
  PropertiesTableComponentConfigSchema,
  SelectionComponentConfigInputSchema,
  ShapeComponentConfigInputSchema,
  ShapeComponentConfigSchema,
  ShapeComponentInputSchema,
  ShapeComponentSchema,
  ShapeComponentTypeEnum,
  ShapeSchema,
  ShapeTypeEnum,
  TenantDefaultsInputSchema,
  TenantDefaultsSchema,
  TenantSchema,
  TopicSchema,
  UpdateDocumentInputSchema,
  UpdateFolderInputSchema,
  UpdateProductInputSchema,
  UpdateProductVariantInputSchema,
  UpdateShapeInputSchema,
  UpdateTopicInputSchema,
  basicShapeSchema
};
