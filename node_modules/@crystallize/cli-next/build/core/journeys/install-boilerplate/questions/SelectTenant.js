import { Box, Newline, Text } from 'ink';
import Link from 'ink-link';
import { UncontrolledTextInput } from 'ink-text-input';
import React from 'react';
import { useState } from 'react';
import { colors } from '../../../../config/colors.js';
import { Select } from '../../../components/Select.js';
import { useJourney } from '../context/provider.js';
export const SelectTenant = () => {
    const { state, dispatch } = useJourney();
    const [shouldAskForInput, askForInput] = useState(state.bootstrapTenant && !state.tenant);
    return (React.createElement(React.Fragment, null,
        !shouldAskForInput && !state.tenant && (React.createElement(React.Fragment, null,
            React.createElement(Text, null,
                "Please select a Crystallize tenant",
                React.createElement(Newline, null),
                React.createElement(Text, { dimColor: true },
                    "Don't have a tenant yet? Create one at ",
                    React.createElement(Link, { url: "https://crystallize.com/signup" }, "https://crystallize.com/signup"))),
            React.createElement(Select, { options: [
                    {
                        label: 'Our demo tenant',
                        value: {
                            identifier: state.boilerplate?.blueprint,
                            boostrap: false,
                        },
                        render: () => (React.createElement(React.Fragment, null,
                            React.createElement(Text, null,
                                "Our demo tenant (",
                                state.boilerplate?.blueprint,
                                ")"),
                            React.createElement(Newline, null),
                            React.createElement(Text, { dimColor: true }, "Lots of demo data here already"))),
                    },
                    {
                        label: 'My own existing tenant',
                        value: {
                            identifier: '',
                            boostrap: false,
                        },
                        render: () => (React.createElement(React.Fragment, null,
                            React.createElement(Text, null, "My own existing tenant"),
                            React.createElement(Newline, null),
                            React.createElement(Text, { dimColor: true }, "Of course your tenant content model (shapes, items) must fit the boilerplate."))),
                    },
                    {
                        label: 'Create a new tenant for me',
                        value: {
                            identifier: '',
                            boostrap: true,
                        },
                        render: () => (React.createElement(React.Fragment, null,
                            React.createElement(Text, null, "Create a new tenant for me"),
                            React.createElement(Newline, null),
                            React.createElement(Text, { dimColor: true }, "A tenant will be bootstrapped for you with boilerplate content. (same as `install -b`)"))),
                    },
                ], onSelect: (answer) => {
                    if (answer.identifier === '') {
                        if (answer.boostrap === true) {
                            dispatch.setBootstrapTenant();
                        }
                        askForInput(true);
                    }
                    else {
                        dispatch.setTenant(answer);
                    }
                } }))),
        shouldAskForInput && (React.createElement(React.Fragment, null,
            React.createElement(Box, null,
                React.createElement(Box, { marginRight: 1 },
                    React.createElement(Text, null, "Enter a tenant identifier:")),
                React.createElement(UncontrolledTextInput, { placeholder: state.boilerplate?.blueprint, onSubmit: (tenant) => {
                        dispatch.setTenant({ identifier: tenant });
                        askForInput(false);
                    } })),
            state.bootstrapTenant && (React.createElement(React.Fragment, null,
                React.createElement(Text, { dimColor: true }, "If this tenant identifier is not available we'll pick a very close name for you."))))),
        state.tenant && (React.createElement(Text, null,
            "Using the Tenant with identifier: ",
            React.createElement(Text, { color: colors.highlight }, state.tenant.identifier),
            "."))));
};
