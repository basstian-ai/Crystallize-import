import { DownloadProject } from './actions/DownloadProject.js';
import { SelectBoilerplate } from './questions/SelectBoilerplate.js';
import { SelectTenant } from './questions/SelectTenant.js';
import { ContextProvider, useJourney } from './context/provider.js';
import { Tips } from '../../components/Tips.js';
import { ExecuteRecipes } from './actions/ExecuteRecipes.js';
import { SetupCredentials } from '../../components/SetupCredentials.js';
import { fetchAvailableTenantIdentifier } from '../../utils/crystallize.js';
import { Messages } from '../../components/Messages.js';
import { colors } from '../../../config/colors.js';
import React from 'react';
import { Success } from './actions/Success.js';
import { Text } from 'ink';
export const InstallBoilerplateJourney = ({ folder, tenantIdentifier, bootstrapTenant = false, isVerbose = false, boilerplate }) => {
    return (React.createElement(ContextProvider, { initialState: {
            folder,
            boilerplate,
            bootstrapTenant: !!bootstrapTenant,
            ...(tenantIdentifier
                ? {
                    tenant: {
                        identifier: tenantIdentifier,
                    },
                }
                : {}),
        } },
        React.createElement(Journey, { isVerbose: isVerbose })));
};
const Journey = ({ isVerbose }) => {
    const { state, dispatch } = useJourney();
    return (React.createElement(React.Fragment, null,
        React.createElement(Text, null,
            "Install will happen in directory: ",
            React.createElement(Text, { color: colors.highlight }, state.folder)),
        React.createElement(SelectBoilerplate, null),
        state.boilerplate && React.createElement(SelectTenant, null),
        state.boilerplate && state.tenant?.identifier && state.bootstrapTenant && !state.credentials && (React.createElement(SetupCredentials, { dispatch: (user, credentials) => {
                fetchAvailableTenantIdentifier(credentials, state.tenant.identifier).then((newIdentifier) => {
                    dispatch.changeTenant({
                        identifier: newIdentifier,
                    });
                    dispatch.setCredentials(credentials);
                });
            } })),
        state.isWizardFullfilled && React.createElement(DownloadProject, null),
        state.isDownloaded && React.createElement(ExecuteRecipes, { isVerbose: isVerbose }),
        React.createElement(Messages, { messages: state.messages }),
        !state.isFullfilled && React.createElement(Tips, null),
        state.isFullfilled && React.createElement(Success, null)));
};
