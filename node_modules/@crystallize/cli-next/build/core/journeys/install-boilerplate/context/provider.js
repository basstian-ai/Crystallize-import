import { createContext, useContext, useReducer } from 'react';
import { isWizardFullfilled, mapToReducerActions, Reducer } from './reducer.js';
import React from 'react';
const StateContext = createContext(undefined);
const DispatchContext = createContext(undefined);
const initiateState = (state) => {
    return {
        folder: state.folder,
        tenant: state.tenant,
        boilerplate: state.boilerplate,
        bootstrapTenant: state.bootstrapTenant,
        isWizardFullfilled: isWizardFullfilled(state),
        isDownloaded: false,
        isFullfilled: false,
        messages: [],
        isBoostrapping: false,
        readme: '',
    };
};
export const ContextProvider = ({ children, initialState }) => {
    const [state, dispatch] = useReducer(Reducer, initiateState(initialState));
    return (React.createElement(StateContext.Provider, { value: state },
        React.createElement(DispatchContext.Provider, { value: dispatch }, children)));
};
function useContextState() {
    const context = useContext(StateContext);
    if (context === undefined) {
        throw new Error('useContextState must be used within the ContextProvider.');
    }
    return context;
}
function useContextDispatch() {
    const context = useContext(DispatchContext);
    if (context === undefined) {
        throw new Error('useContextDispatch must be used within the ContextProvider.');
    }
    return context;
}
export function useJourney() {
    const actions = mapToReducerActions(useContextDispatch());
    const state = useContextState();
    return {
        state,
        dispatch: actions,
    };
}
