import { createSpecDefaults } from '@crystallize/import-utilities/dist/bootstrap-tenant/bootstrapper/index.js';
import { Text, useApp } from 'ink';
import React, { useEffect, useReducer } from 'react';
import { Messages } from '../../components/Messages.js';
import { SetupCredentials } from '../../components/SetupCredentials.js';
import { Spinner } from '../../components/Spinner.js';
import dumpTenant from '../../use-cases/dumpTenant.js';
import { Reducer } from './reducer.js';
const feedbacks = [
    'Dumping...',
    'Media...',
    'Shapes...',
    'Grids...',
    'Items...',
    'Languages...',
    'Price variants...',
    'VAT types...',
    'Topic maps...',
    'Customers...',
    'Orders...',
];
export const DumpTenantJourney = ({ folder, tenantIdentifier, multiLingual = true, excludeOrders = true, excludeCustomers = true }) => {
    const { exit } = useApp();
    const [state, dispatch] = useReducer(Reducer, {
        isDumping: false,
        feedbackIndex: 0,
        messages: [],
        isDone: false,
    });
    useEffect(() => {
        let timer;
        if (!state.isDone && state.isDumping) {
            timer = setTimeout(() => {
                dispatch({ type: 'SHOW_NEW_FEEDBACK', length: feedbacks.length });
            }, 2000);
        }
        return () => {
            clearTimeout(timer);
        };
    }, [state.feedbackIndex, state.isDumping]);
    return (React.createElement(React.Fragment, null,
        !state.isDumping && !state.isDone && (React.createElement(SetupCredentials, { dispatch: (user, credentials) => {
                dispatch({ type: 'DUMPING_STARTED' });
                dumpTenant({
                    tenantIdentifier,
                    folder: folder,
                    credentials,
                    multiLingual,
                    emit: (eventName, message) => {
                        dispatch({ type: 'ADD_MESSAGE', message: `${eventName}: ${message}` });
                    },
                    specOptions: {
                        ...createSpecDefaults,
                        orders: !excludeOrders,
                        customers: !excludeCustomers,
                    },
                }).then((spec) => {
                    dispatch({ type: 'DUMPING_DONE' });
                    exit();
                });
            } })),
        state.isDumping && (React.createElement(React.Fragment, null,
            React.createElement(Text, null,
                React.createElement(Spinner, null),
                "Dumping tenant: ",
                React.createElement(Text, { dimColor: true }, feedbacks[state.feedbackIndex])))),
        React.createElement(Messages, { title: "Trace", messages: state.messages })));
};
