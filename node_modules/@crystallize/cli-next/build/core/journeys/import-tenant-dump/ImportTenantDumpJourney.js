import { EVENT_NAMES } from '@crystallize/import-utilities';
import { Text, useApp } from 'ink';
import React, { useState } from 'react';
import { useReducer } from 'react';
import { colors } from '../../../config/colors.js';
import { ImportStatus } from '../../components/ImportStatus.js';
import { Messages } from '../../components/Messages.js';
import { SetupCredentials } from '../../components/SetupCredentials.js';
import { Spinner } from '../../components/Spinner.js';
import createTenant from '../../use-cases/createTenant.js';
import importTenantDump from '../../use-cases/importTentantDump.js';
import { fetchAvailableTenantIdentifier } from '../../utils/crystallize.js';
import { Reducer } from './reducer.js';
export const ImportTenantDumpJourney = ({ specFilePath, tenantIdentifier, multiLingual = false }) => {
    const { exit } = useApp();
    const [status, setStatus] = useState(null);
    const [state, dispatch] = useReducer(Reducer, {
        feedbackIndex: 0,
        messages: [],
        isDone: false,
        isImporting: false,
    });
    return (React.createElement(React.Fragment, null,
        !state.credentials && (React.createElement(SetupCredentials, { dispatch: (user, credentials) => {
                dispatch({ type: 'SET_CREDENTIALS', credentials });
                fetchAvailableTenantIdentifier(credentials, tenantIdentifier).then((availableIdentifier) => {
                    const newTenant = {
                        identifier: availableIdentifier,
                    };
                    dispatch({
                        type: 'CHANGE_TENANT',
                        item: newTenant,
                    });
                    createTenant(newTenant, credentials).then(() => {
                        dispatch({ type: 'IMPORT_STARTED' });
                        importTenantDump({
                            tenantIdentifier: newTenant.identifier,
                            specFilePath,
                            credentials,
                            multiLingual,
                            emit: (eventName, message) => {
                                if (eventName === EVENT_NAMES.STATUS_UPDATE) {
                                    setStatus(message);
                                    return;
                                }
                                dispatch({ type: 'ADD_MESSAGE', message: `${eventName}: ${message}` });
                            },
                        }).then(() => {
                            dispatch({ type: 'IMPORT_DONE' });
                            exit();
                        });
                    });
                });
            } })),
        state.credentials && React.createElement(CreateTenant, { state: state, requestedTenantIdentifier: tenantIdentifier }),
        state.isImporting && (React.createElement(React.Fragment, null,
            React.createElement(Text, null,
                React.createElement(Spinner, null),
                "Importing tenant"),
            status && React.createElement(ImportStatus, { status: status }))),
        state.isDone && React.createElement(React.Fragment, null, status && React.createElement(ImportStatus, { status: status })),
        state.messages.length > 0 && React.createElement(Messages, { title: "Trace", messages: state.messages })));
};
export const CreateTenant = ({ requestedTenantIdentifier, state }) => {
    return (React.createElement(React.Fragment, null,
        React.createElement(Text, null,
            !state.tenant?.identifier && React.createElement(Spinner, null),
            "Creating tenant: ",
            React.createElement(Text, { dimColor: true }, state.tenant?.identifier || requestedTenantIdentifier)),
        state.tenant?.identifier && state.tenant.identifier !== requestedTenantIdentifier && (React.createElement(Text, { dimColor: true },
            "We changed the asked tenant identifier from ",
            requestedTenantIdentifier,
            " to",
            ' ',
            React.createElement(Text, { color: colors.highlight }, state.tenant.identifier),
            "."))));
};
