import { useEffect, useState } from 'react';
import { Text, Box, Newline } from 'ink';
import { checkCredentials, getCredentials, hasCredentials, removeCredentials, saveCredentials, } from '../utils/crystallize.js';
import { Select } from './Select.js';
import { colors } from '../../config/colors.js';
import { UncontrolledTextInput } from 'ink-text-input';
import React from 'react';
export const SetupCredentials = ({ dispatch }) => {
    const [user, setUser] = useState(null);
    const [credentials, setCredentials] = useState();
    const [askForInput, setAskForInput] = useState(false);
    const [askForSaving, setAskForSaving] = useState(false);
    useEffect(() => {
        hasCredentials().then((hasCredentials) => {
            if (!hasCredentials) {
                setAskForInput(true);
                return;
            }
            getCredentials().then((credentials) => {
                setCredentials(credentials);
            });
        });
    }, []);
    useEffect(() => {
        if (!credentials || user) {
            return;
        }
        checkCredentials(credentials).then((authicatedUser) => {
            if (!authicatedUser) {
                setAskForInput(true);
                return;
            }
            setUser(authicatedUser);
        });
    }, [credentials]);
    if (user && !askForInput && !askForSaving) {
        return (React.createElement(ShouldWeUsedExistingTokenQuestion, { user: user, onAnswer: (answer) => {
                switch (answer) {
                    case 'remove':
                        removeCredentials();
                    case 'no':
                        setAskForInput(true);
                        setUser(null);
                        break;
                    case 'yes':
                        dispatch(user, credentials);
                        return;
                }
            } }));
    }
    if (askForInput) {
        return (React.createElement(AskForCredentials, { onValidCredentials: (credentials, user) => {
                setCredentials(credentials);
                setUser(user);
                setAskForSaving(true);
                setAskForInput(false);
            } }));
    }
    if (askForSaving) {
        return (React.createElement(AskToSaveCredentials, { credentials: credentials, user: user, onAnswered: () => {
                dispatch(user, credentials);
            } }));
    }
    return React.createElement(Text, { dimColor: true }, "Verifying Crystallize Access Tokens...");
};
const ShouldWeUsedExistingTokenQuestion = ({ onAnswer, user }) => {
    return (React.createElement(Box, { flexDirection: "column" },
        React.createElement(Text, null,
            "Hello",
            ' ',
            React.createElement(Text, { color: colors.highlight },
                user.firstName,
                " ",
                user.lastName),
            ' ',
            React.createElement(Text, { dimColor: true, color: colors.highlight },
                "(",
                user.email,
                ")")),
        React.createElement(Text, null, "We found existing valid Crystallize Access Tokens. Want to use it?"),
        React.createElement(Select, { styles: { compact: true }, onSelect: onAnswer, options: [
                {
                    value: 'yes',
                    label: 'Yes',
                },
                {
                    value: 'no',
                    label: 'No',
                },
                {
                    value: 'remove',
                    label: 'Wait, what? Remove the stored access tokens please',
                },
            ] })));
};
const AskForCredentials = ({ onValidCredentials }) => {
    const [inputCredentials, setInputCredentials] = useState();
    const [error, setError] = useState(null);
    useEffect(() => {
        if (!inputCredentials?.ACCESS_TOKEN_SECRET) {
            return;
        }
        checkCredentials({
            ACCESS_TOKEN_ID: inputCredentials?.ACCESS_TOKEN_ID || '',
            ACCESS_TOKEN_SECRET: inputCredentials?.ACCESS_TOKEN_SECRET || '',
        }).then((authicatedUser) => {
            if (!authicatedUser) {
                setError('⚠️ Invalid tokens supplied. Please try again ⚠️');
                setInputCredentials({});
                return;
            }
            onValidCredentials(inputCredentials, authicatedUser);
        });
    }, [inputCredentials]);
    const isLoading = !!inputCredentials?.ACCESS_TOKEN_ID && !!inputCredentials?.ACCESS_TOKEN_SECRET;
    return (React.createElement(React.Fragment, null,
        React.createElement(Box, { flexDirection: "column", marginBottom: 1 },
            React.createElement(Text, null,
                "Please provide Access Tokens to bootstrap the tenant",
                React.createElement(Newline, null),
                React.createElement(Text, { dimColor: true }, "Learn about access tokens: https://crystallize.com/learn/developer-guides/access-tokens"))),
        error && (React.createElement(Box, { flexDirection: "column", marginBottom: 1 },
            React.createElement(Text, { color: colors.highlight }, error))),
        React.createElement(Box, { flexDirection: "column" },
            !isLoading && !inputCredentials?.ACCESS_TOKEN_ID && (React.createElement(React.Fragment, null,
                React.createElement(Text, null, "Access Token ID: "),
                React.createElement(UncontrolledTextInput, { key: "access-token-id", placeholder: "access-token-id", mask: "*", onSubmit: (value) => setInputCredentials({
                        ACCESS_TOKEN_ID: value,
                    }) }))),
            !isLoading && inputCredentials?.ACCESS_TOKEN_ID && !inputCredentials?.ACCESS_TOKEN_SECRET && (React.createElement(React.Fragment, null,
                React.createElement(Text, null,
                    "Access Token ID: ",
                    React.createElement(Text, { dimColor: true }, "***")),
                React.createElement(Text, null, "Access Token Secret: "),
                React.createElement(UncontrolledTextInput, { key: "access-token-secret", placeholder: "access-token-secret", mask: "*", onSubmit: (value) => setInputCredentials({
                        ...inputCredentials,
                        ACCESS_TOKEN_SECRET: value,
                    }) }))),
            isLoading && React.createElement(Text, null, "Verifying Crystallize Access Tokens..."))));
};
const AskToSaveCredentials = ({ credentials, user, onAnswered }) => {
    return (React.createElement(Box, { flexDirection: "column" },
        React.createElement(Text, null,
            "Hello ",
            user.firstName,
            " ",
            user.lastName,
            " (",
            user.email,
            ")"),
        React.createElement(Text, null, "Would you like to save the access tokens for future use?"),
        React.createElement(Select, { styles: { compact: true }, onSelect: (answer) => {
                if (answer === 'yes') {
                    saveCredentials(credentials);
                }
                onAnswered();
            }, options: [
                {
                    value: 'yes',
                    label: 'Yes, please',
                },
                {
                    value: 'no',
                    label: 'No, thanks',
                },
            ] })));
};
