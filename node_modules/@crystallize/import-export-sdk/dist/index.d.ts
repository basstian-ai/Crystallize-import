import { CreateDocumentInput, Id, UpdateDocumentInput, CreateFolderInput, UpdateFolderInput, CreateProductInput, UpdateProductInput, Item, CreateShapeInput, UpdateShapeInput, Shape, CreateTenantInput, Tenant, BulkCreateTopicInput, CreateTopicInput, UpdateTopicInput, Topic } from '@crystallize/schema';
import { ApiCaller, VariablesType } from '@crystallize/js-api-client';

interface ThinClient {
    config: {
        tenantId?: string;
        tenantIdentifier: string;
    };
    pimApi: ApiCaller<any>;
    enqueue: {
        pimApi: (query: string, variables?: VariablesType) => string;
    };
}

interface CreateProps$5 {
    input: CreateDocumentInput;
    language: string;
}
declare const createDocumentMutation: ({ input, language, }: CreateProps$5) => {
    query: string;
    variables: VariablesType;
    type: 'create' | 'update';
};

interface UpdateProps$4 {
    id: Id;
    input: UpdateDocumentInput;
    language: string;
}
declare const updateDocumentMutation: ({ id, input, language, }: UpdateProps$4) => {
    query: string;
    variables: VariablesType;
    type: 'create' | 'update';
};

interface CreateProps$4 {
    input: CreateFolderInput;
    language: string;
}
declare const createFolderMutation: ({ input, language, }: CreateProps$4) => {
    query: string;
    variables: VariablesType;
    type: 'create' | 'update';
};

interface UpdateProps$3 {
    id: Id;
    input: UpdateFolderInput;
    language: string;
}
declare const updateFolderMutation: ({ id, input, language, }: UpdateProps$3) => {
    query: string;
    variables: VariablesType;
    type: 'create' | 'update';
};

interface CreateProps$3 {
    input: CreateProductInput;
    language: string;
}
declare const createProductMutation: ({ input, language, }: CreateProps$3) => {
    query: string;
    variables: VariablesType;
    type: 'create' | 'update';
};

interface UpdateProps$2 {
    id: Id;
    input: UpdateProductInput;
    language: string;
}
declare const updateProductMutation: ({ id, input, language, }: UpdateProps$2) => {
    query: string;
    variables: VariablesType;
    type: 'create' | 'update';
};

declare const getItemQuery: ({ id, language, versionLabel, }: {
    id: string;
    language: string;
    versionLabel: 'current' | 'draft' | 'published';
}) => {
    query: string;
    variables: VariablesType;
};

interface ItemOperation {
    exists: (client: ThinClient) => Promise<boolean>;
    execute: (client: ThinClient) => Promise<Item | undefined>;
    enqueue: (client: ThinClient) => Promise<void>;
}
declare const item: (data: Item) => ItemOperation;

interface GetProps {
    tenantId: string;
    identifier: string;
}
interface GetConfig {
    includeComponents?: boolean;
}
declare const getShapeQuery: ({ tenantId, identifier }: GetProps, config?: GetConfig) => {
    query: string;
    variables: VariablesType;
};

interface GetManyProps {
    tenantId: string;
}
interface GetManyConfig {
    includeComponents?: boolean;
}
declare const getManyShapesQuery: ({ tenantId }: GetManyProps, config?: GetManyConfig) => {
    query: string;
    variables: VariablesType;
};

interface CreateProps$2 {
    input: CreateShapeInput;
}
declare const createShapeMutation: ({ input, }: CreateProps$2) => {
    query: string;
    variables: VariablesType;
    type: 'create' | 'update';
};

interface UpdateProps$1 {
    tenantId: Id;
    identifier: string;
    input: UpdateShapeInput;
}
declare const updateShapeMutation: ({ tenantId, identifier, input, }: UpdateProps$1) => {
    query: string;
    variables: VariablesType;
    type: 'create' | 'update';
};

interface ShapeOperation {
    exists: (client: ThinClient) => Promise<boolean>;
    execute: (client: ThinClient) => Promise<Shape | undefined>;
    enqueue: (massClient: ThinClient) => Promise<void>;
}
/**
 * shape returns an object of shape operation functions.
 *
 * @param shape Shape to perform an operation on
 * @returns ShapeOperation
 */
declare const shape: (data: Shape) => ShapeOperation;

interface CreateProps$1 {
    input: CreateTenantInput;
}
declare const createTenantMutation: ({ input, }: CreateProps$1) => {
    query: string;
    variables: VariablesType;
    type: 'create' | 'update';
};

interface DeleteProps {
    id: Id;
}
declare const deleteTenantMutation: ({ id, }: DeleteProps) => {
    query: string;
    variables: VariablesType;
};

interface TenantOperation {
    exists: (client: ThinClient) => Promise<boolean>;
    execute: (client: ThinClient) => Promise<Tenant | undefined>;
    enqueue: (massClient: ThinClient) => Promise<void>;
}
/**
 * shape returns an object of shape operation functions.
 *
 * @param shape Shape to perform an operation on
 * @returns ShapeOperation
 */
declare const tenant: (data: CreateTenantInput) => TenantOperation;

interface BulkCreateProps {
    tenantId: string;
    language: string;
    input: BulkCreateTopicInput[];
}
declare const bulkCreateTopicsMutation: ({ tenantId, language, input, }: BulkCreateProps) => {
    query: string;
    variables: VariablesType;
};

interface CreateProps {
    language: string;
    input: CreateTopicInput;
}
declare const createTopicMutation: ({ language, input, }: CreateProps) => {
    query: string;
    variables: VariablesType;
};

interface UpdateProps {
    id: Id;
    language: string;
    input: UpdateTopicInput;
}
declare const updateTopicMutation: ({ id, language, input, }: UpdateProps) => {
    query: string;
    variables: VariablesType;
};

declare const getTopicQuery: ({ id, language, }: {
    id: string;
    language: string;
}) => {
    query: string;
    variables: VariablesType;
};

interface TopicOperation {
    exists: (client: ThinClient) => Promise<boolean>;
    execute: (client: ThinClient) => Promise<Topic | undefined>;
}
declare const topic: (data: Topic) => TopicOperation;

export { ThinClient, bulkCreateTopicsMutation, createDocumentMutation, createFolderMutation, createProductMutation, createShapeMutation, createTenantMutation, createTopicMutation, deleteTenantMutation, getItemQuery, getManyShapesQuery, getShapeQuery, getTopicQuery, item, shape, tenant, topic, updateDocumentMutation, updateFolderMutation, updateProductMutation, updateShapeMutation, updateTopicMutation };
