"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRichTextInput = void 0;
const utils_1 = require("../utils");
// @ts-expect-error content-transformer  has no types
const fromHTML_1 = __importDefault(require("@crystallize/content-transformer/fromHTML"));
function createRichTextInput(content, language) {
    function stringToJson(str) {
        return [
            JSON.parse(JSON.stringify({
                kind: 'block',
                type: 'paragraph',
                children: [
                    {
                        kind: 'inline',
                        type: 'span',
                        textContent: str,
                    },
                ],
            })),
        ];
    }
    const inp = {};
    if (typeof content === 'string') {
        inp.json = stringToJson(content);
    }
    else if (typeof content === 'object') {
        /**
         * Determine if the rich text content is one of
         * {
         *  json: ...,
         *  html: ...,
         *  plainText: ...
         * }
         * or
         * {
         *  [lang]: {
         *    json: ...
         *    ...
         *  }
         * }
         *
         **/
        const c = content;
        const keys = Object.keys(content || {});
        const isNotTranslated = ['json', 'html', 'plainText'].includes(keys[0]);
        const translatedContent = isNotTranslated ? c : (0, utils_1.getTranslation)(c, language);
        if (translatedContent === null || translatedContent === void 0 ? void 0 : translatedContent.html) {
            inp.json = (0, fromHTML_1.default)(translatedContent === null || translatedContent === void 0 ? void 0 : translatedContent.html);
        }
        else {
            if (typeof translatedContent === 'string') {
                inp.json = stringToJson(translatedContent);
            }
            else {
                if (translatedContent.json) {
                    inp.json = translatedContent.json;
                }
                else if (translatedContent.html) {
                    inp.json = (0, fromHTML_1.default)(translatedContent.html);
                }
                else if (translatedContent.plainText) {
                    inp.json = stringToJson(translatedContent.plainText);
                }
            }
        }
    }
    return inp;
}
exports.createRichTextInput = createRichTextInput;
