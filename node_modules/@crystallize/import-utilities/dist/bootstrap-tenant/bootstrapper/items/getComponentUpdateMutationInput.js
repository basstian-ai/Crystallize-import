"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getComponentUpdateMutationInput = void 0;
const getItemIdsForItemRelations_1 = require("./getItemIdsForItemRelations");
// /**
//  * Fetches the mutation input for a component update mutation.
//  *
//  * @param { ShapeComponent, componentContent, componentId }
//  * @returns Promise with mutation object or null
//  */
const getComponentUpdateMutationInput = async ({ shapeComponent, componentContent, componentsData, componentId, context, onUpdate, item, }) => {
    var _a, _b, _c, _d;
    if (!shapeComponent) {
        return null;
    }
    let mutationInput = null;
    switch (shapeComponent === null || shapeComponent === void 0 ? void 0 : shapeComponent.type) {
        case 'itemRelations': {
            mutationInput = {
                componentId,
                itemRelations: {
                    itemIds: await (0, getItemIdsForItemRelations_1.getItemIdsForItemRelation)(context, onUpdate, item, componentContent),
                    skus: (_a = componentContent === null || componentContent === void 0 ? void 0 : componentContent.productVariants) === null || _a === void 0 ? void 0 : _a.map((relObject) => relObject.sku),
                },
            };
            break;
        }
        case 'componentChoice':
        case 'contentChunk': {
            const { choices } = shapeComponent.config;
            const { components } = shapeComponent.config;
            const itemRelationIds = (choices || components)
                .filter((s) => s.type === 'itemRelations')
                .map((s) => s.id);
            // Get existing data for component
            if (itemRelationIds.length > 0) {
                const existingComponentsData = componentsData === null || componentsData === void 0 ? void 0 : componentsData[context.targetLanguage || context.defaultLanguage];
                const componentData = existingComponentsData[componentId];
                if (componentData) {
                    if (shapeComponent.type === 'componentChoice') {
                        if ((_b = componentData.componentChoice) === null || _b === void 0 ? void 0 : _b.componentId) {
                            const selectedDef = choices.find((c) => c.id === componentData.componentChoice.componentId);
                            if ((selectedDef === null || selectedDef === void 0 ? void 0 : selectedDef.type) === 'itemRelations') {
                                const chosenComponentId = componentData.componentChoice.componentId;
                                const component = componentContent;
                                componentData.componentChoice;
                                mutationInput = {
                                    componentId,
                                    componentChoice: {
                                        componentId: chosenComponentId,
                                        itemRelations: {
                                            itemIds: await (0, getItemIdsForItemRelations_1.getItemIdsForItemRelation)(context, onUpdate, item, component[chosenComponentId]),
                                            skus: (_d = (_c = component[chosenComponentId]) === null || _c === void 0 ? void 0 : _c.productVariants) === null || _d === void 0 ? void 0 : _d.map((relObject) => relObject.sku),
                                        },
                                    },
                                };
                            }
                        }
                    }
                    else if (shapeComponent.type === 'contentChunk') {
                        mutationInput = Object.assign({ componentId }, componentData);
                        await Promise.all(mutationInput.contentChunk.chunks.map(async (chunk, chunkIndex) => {
                            const jsonChunk = componentContent[chunkIndex];
                            // Get item ids within chunk
                            await Promise.all(itemRelationIds.map(async (itemRelationId) => {
                                var _a, _b;
                                const itemRelationComponentIndex = chunk.findIndex((c) => c.componentId === itemRelationId);
                                if (itemRelationComponentIndex !== -1) {
                                    chunk[itemRelationComponentIndex].itemRelations.itemIds = await (0, getItemIdsForItemRelations_1.getItemIdsForItemRelation)(context, onUpdate, item, jsonChunk[itemRelationId]);
                                    chunk[itemRelationComponentIndex].itemRelations.skus =
                                        (_b = (_a = jsonChunk[itemRelationId]) === null || _a === void 0 ? void 0 : _a.productVariants) === null || _b === void 0 ? void 0 : _b.map((relObject) => relObject.sku);
                                }
                            }));
                        }));
                    }
                }
            }
            break;
        }
    }
    return mutationInput;
};
exports.getComponentUpdateMutationInput = getComponentUpdateMutationInput;
