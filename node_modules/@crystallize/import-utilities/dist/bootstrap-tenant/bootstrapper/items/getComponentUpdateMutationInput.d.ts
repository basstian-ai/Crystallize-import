import { ShapeComponent } from '@crystallize/schema';
import { JSONItem } from '../../json-spec';
import { AreaUpdate, BootstrapperContext } from '../utils';
import { ComponentContentInput } from '../../../types';
export declare const getComponentUpdateMutationInput: ({ shapeComponent, componentContent, componentsData, componentId, context, onUpdate, item, }: {
    shapeComponent?: {
        type: "boolean" | "componentChoice" | "contentChunk" | "datetime" | "gridRelations" | "images" | "itemRelations" | "location" | "numeric" | "paragraphCollection" | "propertiesTable" | "richText" | "singleLine" | "videos" | "selection" | "files";
        id: string;
        name: string;
        description?: string | null | undefined;
        config?: import("@crystallize/schema").ComponentChoiceComponentConfig | import("@crystallize/schema").ContentChunkComponentConfig | ({
            min?: number | null | undefined;
            max?: number | null | undefined;
        } & {
            maxFileSize: {
                size: number;
                unit: "Bytes" | "GiB" | "KiB" | "MiB";
            };
            acceptedContentTypes?: {
                contentType: string;
                extensionLabel?: string | null | undefined;
            }[] | null | undefined;
        }) | ({
            min?: number | null | undefined;
            max?: number | null | undefined;
            minItems?: number | null | undefined;
            maxItems?: number | null | undefined;
            minSkus?: number | null | undefined;
            maxSkus?: number | null | undefined;
        } & {
            acceptedShapeIdentifiers?: string[] | null | undefined;
            quickSelect?: {
                folders?: {
                    folderId: string;
                }[] | null | undefined;
            } | null | undefined;
        }) | {
            decimalPlaces?: number | undefined;
            units?: string[] | undefined;
        } | {
            sections: {
                keys: string[];
                title?: string | null | undefined;
            }[];
        } | ({
            min?: number | null | undefined;
            max?: number | null | undefined;
        } & {
            options?: {
                value: string;
                key: string;
                isPreselected: boolean;
            }[] | null | undefined;
        }) | null | undefined;
    } | undefined;
    componentContent: ComponentContentInput;
    componentsData?: Record<string, any> | undefined;
    componentId: string;
    context: BootstrapperContext;
    onUpdate: (t: AreaUpdate) => any;
    item: JSONItem;
}) => Promise<object | null>;
