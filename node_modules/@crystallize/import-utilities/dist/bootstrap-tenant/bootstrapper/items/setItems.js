"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setItems = void 0;
const utils_1 = require("../utils");
const remote_file_upload_1 = require("../utils/remote-file-upload");
const handleItem_1 = require("./handleItem");
const handleItemRelationsAndPublish_1 = require("./handleItemRelationsAndPublish");
async function setItems({ spec, onUpdate, context, }) {
    if (!(spec === null || spec === void 0 ? void 0 : spec.items)) {
        return;
    }
    const ffmpeg = await remote_file_upload_1.ffmpegAvailable;
    if (!ffmpeg) {
        onUpdate({
            warning: {
                code: 'FFMPEG_UNAVAILABLE',
                message: 'ffmpeg is not available. Videos will not be included. Installment instructions for ffmpeg: https://ffmpeg.org/download.html',
            },
        });
    }
    const rootItemId = await (0, utils_1.getTenantRootItemId)(context);
    // Get a total item count
    let totalItems = 0;
    function getCount(item) {
        var _a;
        totalItems++;
        if (item && 'children' in item) {
            (_a = item.children) === null || _a === void 0 ? void 0 : _a.forEach(getCount);
        }
    }
    spec.items.forEach(getCount);
    // Double the item count since we're doing add/update _and_ item relations later
    totalItems *= 2;
    let finishedItems = 0;
    for (let i = 0; i < spec.items.length; i++) {
        const item = spec.items[i];
        try {
            finishedItems = await (0, handleItem_1.handleItem)(item, i, rootItemId, context, onUpdate, finishedItems, totalItems);
        }
        catch (e) {
            onUpdate({
                error: {
                    code: 'CANNOT_HANDLE_ITEM',
                    message: `Skipping "${(0, utils_1.getTranslation)(item.name, context.targetLanguage || context.defaultLanguage)}"`,
                    item,
                },
            });
        }
    }
    /**
     * Item relations needs to be handled at the end, after all
     * items are created
     */
    onUpdate({
        message: 'Updating item relations...',
    });
    /**
     * At this point we want to start using cached values
     * so that we don't hit the API as much and speed things up
     */
    context.useReferenceCache = true;
    for (let i = 0; i < spec.items.length; i++) {
        finishedItems = await (0, handleItemRelationsAndPublish_1.handleItemRelationsAndPublish)(spec.items[i], context, onUpdate, finishedItems, totalItems);
    }
    // clearInterval(getFileuploaderStatusInterval)
    onUpdate({
        progress: 1,
    });
}
exports.setItems = setItems;
