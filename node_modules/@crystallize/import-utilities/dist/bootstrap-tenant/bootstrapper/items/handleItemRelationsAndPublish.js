"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleItemRelationsAndPublish = void 0;
const utils_1 = require("../utils");
const graphql_request_1 = require("graphql-request");
const publishItem_1 = require("./publishItem");
const getComponentUpdateMutationInput_1 = require("./getComponentUpdateMutationInput");
async function handleItemRelationsAndPublish(item, context, onUpdate, finishedItems, totalItems) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (!item) {
        return finishedItems;
    }
    onUpdate({
        message: `Item relations: ${(0, utils_1.getTranslation)(item.name, context.targetLanguage || context.defaultLanguage)}`,
    });
    if (item.id) {
        // Pull the item info from the cache
        const versionsInfo = context.itemVersions.get(item.id);
        if (item.id) {
            if (item.components) {
                const keys = Object.keys(item.components);
                for (let i = 0; i < keys.length; i++) {
                    const componentId = keys[i];
                    const jsonItem = (_a = item.components) === null || _a === void 0 ? void 0 : _a[componentId];
                    if (jsonItem) {
                        const shape = (_b = context.shapes) === null || _b === void 0 ? void 0 : _b.find((s) => s.identifier === item.shape);
                        const def = (_c = shape === null || shape === void 0 ? void 0 : shape.components) === null || _c === void 0 ? void 0 : _c.find((c) => c.id === componentId);
                        const mutationInput = await (0, getComponentUpdateMutationInput_1.getComponentUpdateMutationInput)({
                            shapeComponent: def,
                            componentContent: jsonItem,
                            componentsData: item._componentsData,
                            componentId,
                            context,
                            onUpdate,
                            item,
                        });
                        // Update the component
                        if (mutationInput) {
                            try {
                                const r = await context.callPIM({
                                    query: (0, graphql_request_1.gql) `
                    mutation UPDATE_RELATIONS_COMPONENT(
                      $itemId: ID!
                      $language: String!
                      $input: ComponentInput!
                    ) {
                      item {
                        updateComponent(
                          itemId: $itemId
                          language: $language
                          input: $input
                        ) {
                          id
                        }
                      }
                    }
                  `,
                                    variables: {
                                        itemId: item.id,
                                        language: context.targetLanguage || context.defaultLanguage,
                                        input: mutationInput,
                                    },
                                });
                                if (r.errors) {
                                    throw r.errors;
                                }
                            }
                            catch (err) {
                                onUpdate({
                                    error: {
                                        code: 'CANNOT_HANDLE_ITEM_RELATION',
                                        message: `Unable to update relation for item id "${item.id}" with input ${JSON.stringify(mutationInput)} `,
                                        item,
                                    },
                                });
                            }
                        }
                    }
                }
            }
            const product = item;
            if ((_d = product.variants) === null || _d === void 0 ? void 0 : _d.length) {
                for (const variant of product.variants) {
                    if (!variant.components) {
                        continue;
                    }
                    const keys = Object.keys(variant.components);
                    for (let i = 0; i < keys.length; i++) {
                        const componentId = keys[i];
                        const jsonItem = (_e = variant.components) === null || _e === void 0 ? void 0 : _e[componentId];
                        if (jsonItem) {
                            const shape = (_f = context.shapes) === null || _f === void 0 ? void 0 : _f.find((s) => s.identifier === item.shape);
                            const def = (_g = shape === null || shape === void 0 ? void 0 : shape.variantComponents) === null || _g === void 0 ? void 0 : _g.find((c) => c.id === componentId);
                            const mutationInput = await (0, getComponentUpdateMutationInput_1.getComponentUpdateMutationInput)({
                                shapeComponent: def,
                                componentContent: jsonItem,
                                componentsData: variant._componentsData,
                                componentId,
                                context,
                                onUpdate,
                                item,
                            });
                            // Update the component
                            if (mutationInput) {
                                try {
                                    const r = await context.callPIM({
                                        query: (0, graphql_request_1.gql) `
                      mutation UPDATE_VARIANT_RELATIONS_COMPONENT(
                        $productId: ID!
                        $sku: String!
                        $language: String!
                        $input: ComponentInput!
                      ) {
                        product {
                          updateVariantComponent(
                            productId: $productId
                            sku: $sku
                            language: $language
                            input: $input
                          ) {
                            id
                          }
                        }
                      }
                    `,
                                        variables: {
                                            productId: item.id,
                                            sku: variant.sku,
                                            language: context.targetLanguage || context.defaultLanguage,
                                            input: mutationInput,
                                        },
                                    });
                                    if (r.errors) {
                                        throw r.errors;
                                    }
                                }
                                catch (err) {
                                    onUpdate({
                                        error: {
                                            code: 'CANNOT_HANDLE_ITEM_RELATION',
                                            message: `Unable to update relation for variant with sku "${variant.sku}" with input ${JSON.stringify(mutationInput)} `,
                                        },
                                    });
                                }
                            }
                        }
                    }
                }
            }
        }
        // Publish if needed
        if (item.id) {
            for (let i = 0; i < context.languages.length; i++) {
                const language = context.languages[i].code;
                const publish = () => {
                    context.emit(utils_1.EVENT_NAMES.ITEM_PUBLISHED, {
                        id: item.id,
                        name: (0, utils_1.getTranslation)(item.name, language),
                        language,
                    });
                    return (0, publishItem_1.publishItem)(language, item.id, context);
                };
                const passedPublishConfig = (_h = item._options) === null || _h === void 0 ? void 0 : _h.publish;
                if (typeof passedPublishConfig === 'boolean') {
                    if (passedPublishConfig) {
                        await publish();
                    }
                }
                else if (context.config.itemPublish === 'publish' ||
                    !versionsInfo ||
                    versionsInfo[context.languages[i].code] ===
                        utils_1.ItemVersionDescription.Published) {
                    await publish();
                }
            }
        }
    }
    finishedItems++;
    onUpdate({
        progress: finishedItems / totalItems,
    });
    if (item && 'children' in item) {
        const itm = item;
        if (itm.children) {
            for (let i = 0; i < itm.children.length; i++) {
                finishedItems = await handleItemRelationsAndPublish(itm.children[i], context, onUpdate, finishedItems, totalItems);
            }
        }
    }
    return finishedItems;
}
exports.handleItemRelationsAndPublish = handleItemRelationsAndPublish;
