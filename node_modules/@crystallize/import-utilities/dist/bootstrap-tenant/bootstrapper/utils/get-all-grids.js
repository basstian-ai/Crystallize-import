"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllGrids = void 0;
const QUERY_GET_ALL_GRIDS = `
query GET_GRIDS($tenantId: ID!, $language: String!) {
	grid {
    getMany (
      tenantId: $tenantId
      language: $language
    ) {
      id
    }
  }
}
`;
const QUERY_GET_GRID = `
query GET_GRID($id: ID!, $language: String!) {
	grid {
    get (
      id: $id
      language: $language
    ) {
      id
      name
      rows {
        columns {
          itemId
          item {
            id
            externalReference
            tree {
              path(language: $language)
            }
          }
          layout {
            rowspan
            colspan
          }
        }
      }
    }
  }
}
`;
async function getAllGrids(language, context, options) {
    var _a, _b, _c;
    const tenantId = context.tenantId;
    const responseAllGrids = await context.callPIM({
        query: QUERY_GET_ALL_GRIDS,
        variables: {
            language,
            tenantId,
        },
    });
    function handleRow(row) {
        return {
            columns: row.columns.map((c) => {
                let item;
                if (c.item) {
                    if ((options === null || options === void 0 ? void 0 : options.setItemExternalReference) && !c.item.externalReference) {
                        item = {
                            externalReference: `crystallize-spec-ref-${c.item.id}`,
                        };
                    }
                    else {
                        item = {
                            externalReference: c.item.tree.externalReference,
                            cataloguePath: c.item.tree.path,
                        };
                    }
                }
                return {
                    layout: c.layout,
                    item,
                };
            }),
        };
    }
    async function handleGrid({ id }) {
        var _a, _b, _c;
        // Get base grid info
        const gridResponse = await context.callPIM({
            query: QUERY_GET_GRID,
            variables: {
                id,
                language,
            },
        });
        const grid = (_b = (_a = gridResponse === null || gridResponse === void 0 ? void 0 : gridResponse.data) === null || _a === void 0 ? void 0 : _a.grid) === null || _b === void 0 ? void 0 : _b.get;
        // Get names for remaining languages
        if (context.config.multilingual) {
            grid.name = {
                [language]: grid.name,
            };
            const remainingLanguages = context.languages
                .map((l) => l.code)
                .filter((l) => l !== language);
            await Promise.all(remainingLanguages.map(async (lang) => {
                grid.name[lang] = await getNameForGrid(id, lang, context);
            }));
        }
        return Object.assign(Object.assign({}, grid), { rows: ((_c = grid.rows) === null || _c === void 0 ? void 0 : _c.map(handleRow)) || [] });
    }
    return Promise.all(((_c = (_b = (_a = responseAllGrids.data) === null || _a === void 0 ? void 0 : _a.grid) === null || _b === void 0 ? void 0 : _b.getMany) === null || _c === void 0 ? void 0 : _c.map(handleGrid)) || []);
}
exports.getAllGrids = getAllGrids;
async function getNameForGrid(id, language, context) {
    var _a, _b, _c;
    const response = await context.callPIM({
        query: `
      query GET_NAME_FOR_GRID (
        $id: ID!
        $language: String!
      ) {
        grid {
          get (
            id: $id
            language: $language
          ) {
            name
          }
        }
      }
    `,
        variables: {
            id,
            language,
        },
    });
    return ((_c = (_b = (_a = response.data) === null || _a === void 0 ? void 0 : _a.grid) === null || _b === void 0 ? void 0 : _b.get) === null || _c === void 0 ? void 0 : _c.name) || null;
}
