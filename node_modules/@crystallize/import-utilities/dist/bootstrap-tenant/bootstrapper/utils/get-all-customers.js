"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExistingCustomers = void 0;
const query = `
query GET_CUSTOMERS_PAGE ($after: String, $tenantId: ID!) {
  customer {
    getMany(first: 50, after: $after, tenantId: $tenantId) {
      pageInfo {
        hasNextPage
        endCursor
      }
      edges {
        node {
          identifier
          email
          firstName
          lastName
          companyName
          externalReferences {
            key
            value
          }
          meta {
            key
            value
          }
          taxNumber
          addresses {
            id
            country
            type
            city
            email
            phone
            postalCode
            middleName
            state
            street
            street2
            streetNumber
          }
        }
      }
    }
  }
}
`;
async function getPage(context, after) {
    return context.callPIM({
        query,
        variables: {
            tenantId: context.tenantId,
            after,
        },
    });
}
async function getExistingCustomers({ context, }) {
    var _a, _b, _c;
    let after = '';
    let hasNextPage = true;
    const customers = [];
    while (hasNextPage) {
        const res = await getPage(context, after);
        const getMany = (_b = (_a = res.data) === null || _a === void 0 ? void 0 : _a.customer) === null || _b === void 0 ? void 0 : _b.getMany;
        const pageInfo = getMany === null || getMany === void 0 ? void 0 : getMany.pageInfo;
        if (!getMany || !pageInfo) {
            hasNextPage = false;
        }
        else {
            ((_c = getMany === null || getMany === void 0 ? void 0 : getMany.edges) === null || _c === void 0 ? void 0 : _c.length) > 0 &&
                customers.push(...getMany.edges.map((e) => e.node));
            after = pageInfo.endCursor;
            hasNextPage = pageInfo.hasNextPage;
        }
    }
    return customers;
}
exports.getExistingCustomers = getExistingCustomers;
