import { DocumentNode } from 'graphql';
import { BootstrapperError } from '.';
import { KillableWorker } from './killable-worker';
import { LogLevel } from './types';
export interface IcallAPI {
    query: DocumentNode | string;
    variables?: any;
    suppressErrors?: boolean;
}
export interface IcallAPIResult {
    data: null | Record<string, any>;
    errors?: Record<string, any>[];
}
export declare function sleep(ms: number): Promise<unknown>;
interface QueuedRequest {
    id: string;
    props: IcallAPI;
    failCount: number;
    resolve: (value: IcallAPIResult) => void;
    working?: boolean;
    partOfRateLimitedGroup?: boolean;
}
type errorNotifierFn = (args: BootstrapperError) => void;
export declare class ApiManager extends KillableWorker {
    #private;
    queue: QueuedRequest[];
    url: string;
    currentWorkers: number;
    errorNotifier: errorNotifierFn;
    logLevel: LogLevel;
    CRYSTALLIZE_ACCESS_TOKEN_ID: string;
    CRYSTALLIZE_ACCESS_TOKEN_SECRET: string;
    CRYSTALLIZE_STATIC_AUTH_TOKEN: string;
    CRYSTALLIZE_SESSION_ID: string;
    constructor(url: string);
    setErrorNotifier(fn: errorNotifierFn): void;
    setLogLevel(level: LogLevel): void;
    push: (props: IcallAPI) => Promise<IcallAPIResult>;
    private backoffOnRateLimit;
    private rateLimitLookbackWindowInMinutes;
    private rateLimitAvgReqPrSeconds;
    /**
     * Determine if there is a chance for this client alone
     * to go over the rate limit. Since the API rate limiter
     * is IP based, there might be other clients affecting the
     * rate limit, so this measure here is not enough on its own.
     */
    private clientOverRateLimit;
    /**
     * Keep a record of the last requests, so that we can adjust
     * the number of requests to the API. Factors that can change
     * the number of current workers are:
     * - Network congestion between this client and the API
     * - Crystallize API rate limiting
     * - Local client errors
     * - Crystallize API errors
     */
    private lastRequestsStatuses;
    private recordRequestStatus;
    useSingleWorker(): void;
    work(): Promise<void>;
}
export declare function createAPICaller({ uri, errorNotifier, logLevel, }: {
    uri: string;
    errorNotifier: errorNotifierFn;
    logLevel?: LogLevel;
}): ApiManager;
export {};
