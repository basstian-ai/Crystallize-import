"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseRawItemData = void 0;
function parseRawItemData({ item, options, tr, }) {
    const jsonItem = {
        id: item.id,
        name: tr(item.name, `${item.id}.name`),
        cataloguePath: item.tree.path,
        treePosition: item.tree.position,
        externalReference: item.externalReference,
        shape: item.shape.identifier,
        components: handleComponents(item.components, item.id),
        topics: item.topics,
    };
    if (!jsonItem.externalReference && (options === null || options === void 0 ? void 0 : options.setExternalReference)) {
        jsonItem.externalReference = `crystallize-spec-ref-${item.id}`;
    }
    // Product specifics
    if (item.vatType) {
        const jsonProduct = jsonItem;
        jsonProduct.vatType = item.vatType.name;
        jsonProduct.variants = item.variants.map((v) => {
            var _a, _b, _c, _d;
            const attributes = {};
            (_a = v.attributes) === null || _a === void 0 ? void 0 : _a.forEach(({ attribute, value }) => (attributes[attribute] = value));
            const variant = {
                name: tr(v.name, `${v.sku}.name`),
                sku: v.sku,
                price: handlePriceVariants(v.priceVariants),
                isDefault: v.isDefault,
                attributes,
                externalReference: v.externalReference,
                stock: (_b = v.stockLocations) === null || _b === void 0 ? void 0 : _b.reduce((acc, { identifier, stock }) => {
                    acc[identifier] = stock;
                    return acc;
                }, {}),
                images: (_c = v.images) === null || _c === void 0 ? void 0 : _c.map((i, index) => handleImage(i, `${v.sku}.images.${index}`)),
                subscriptionPlans: (_d = v.subscriptionPlans) === null || _d === void 0 ? void 0 : _d.map(handleSubscriptionPlan),
                components: handleComponents(v.components, v.sku),
            };
            return variant;
        });
    }
    function handleImage(image, id) {
        return {
            src: image.url,
            altText: tr(image.altText, `${id}.altText`),
            caption: tr(image.caption, `${id}.caption`),
        };
    }
    function handleVideo(video, id) {
        var _a;
        return {
            src: video.playlist,
            title: tr(video.title, `${id}.title`),
            thumbnails: (_a = video.thumbnails) === null || _a === void 0 ? void 0 : _a.map((i, index) => handleImage(i, `${id}.thumbnails.${index}`)),
        };
    }
    function handleFile(file, id) {
        return {
            src: file.url,
            title: tr(file.title, `${id}.title`),
        };
    }
    function handleParagraph(paragraph, id) {
        var _a, _b, _c;
        return {
            title: tr((_a = paragraph === null || paragraph === void 0 ? void 0 : paragraph.title) === null || _a === void 0 ? void 0 : _a.text, `${id}.title`),
            body: tr(paragraph === null || paragraph === void 0 ? void 0 : paragraph.body, `${id}.body`),
            images: (_b = paragraph === null || paragraph === void 0 ? void 0 : paragraph.images) === null || _b === void 0 ? void 0 : _b.map((i, index) => handleImage(i, `${id}.images.${index}`)),
            videos: (_c = paragraph === null || paragraph === void 0 ? void 0 : paragraph.videos) === null || _c === void 0 ? void 0 : _c.map((v, index) => handleVideo(v, `${id}.videos.${index}`)),
        };
    }
    function handleComponents(cmps, translationIdBase) {
        const components = {};
        function getComponentContent(c, translationId) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
            if (!c) {
                return null;
            }
            switch (c.type) {
                case 'singleLine': {
                    return tr((_a = c.content) === null || _a === void 0 ? void 0 : _a.text, translationId);
                }
                case 'richText': {
                    return tr(c.content, translationId);
                }
                case 'itemRelations': {
                    return {
                        items: (_c = (_b = c.content) === null || _b === void 0 ? void 0 : _b.items) === null || _c === void 0 ? void 0 : _c.map((item) => {
                            if (options === null || options === void 0 ? void 0 : options.setExternalReference) {
                                return {
                                    externalReference: item.externalReference || `crystallize-spec-ref-${item.id}`,
                                };
                            }
                            return {
                                externalReference: item.externalReference,
                                cataloguePath: item.tree.path,
                            };
                        }),
                        productVariants: (_e = (_d = c.content) === null || _d === void 0 ? void 0 : _d.productVariants) === null || _e === void 0 ? void 0 : _e.map((productVariant) => {
                            if (options === null || options === void 0 ? void 0 : options.setExternalReference) {
                                return {
                                    sku: productVariant.sku,
                                    externalReference: item.externalReference ||
                                        `crystallize-spec-ref-${productVariant.sku}`,
                                };
                            }
                            return {
                                externalReference: item.externalReference,
                                cataloguePath: item.tree.path,
                            };
                        }),
                    };
                }
                case 'gridRelations': {
                    return (_f = c.content) === null || _f === void 0 ? void 0 : _f.grids;
                }
                case 'boolean': {
                    return (_g = c.content) === null || _g === void 0 ? void 0 : _g.value;
                }
                case 'images': {
                    return (_j = (_h = c.content) === null || _h === void 0 ? void 0 : _h.images) === null || _j === void 0 ? void 0 : _j.map((i, index) => handleImage(i, `${translationId}.${index}`));
                }
                case 'videos': {
                    return (_l = (_k = c.content) === null || _k === void 0 ? void 0 : _k.videos) === null || _l === void 0 ? void 0 : _l.map((v, index) => handleVideo(v, `${translationId}.${index}`));
                }
                case 'files': {
                    return (_o = (_m = c.content) === null || _m === void 0 ? void 0 : _m.files) === null || _o === void 0 ? void 0 : _o.map((v, index) => handleFile(v, `${translationId}.${index}`));
                }
                case 'datetime': {
                    return (_p = c.content) === null || _p === void 0 ? void 0 : _p.datetime;
                }
                case 'paragraphCollection': {
                    return (_r = (_q = c.content) === null || _q === void 0 ? void 0 : _q.paragraphs) === null || _r === void 0 ? void 0 : _r.map((v, index) => handleParagraph(v, `${translationId}.${index}`));
                }
                case 'propertiesTable': {
                    return (_t = (_s = c.content) === null || _s === void 0 ? void 0 : _s.sections) === null || _t === void 0 ? void 0 : _t.map(handlePropertiesTableSection);
                }
                case 'selection': {
                    return (_v = (_u = c.content) === null || _u === void 0 ? void 0 : _u.options) === null || _v === void 0 ? void 0 : _v.map((o) => o.key);
                }
                case 'componentChoice': {
                    const sel = (_w = c.content) === null || _w === void 0 ? void 0 : _w.selectedComponent;
                    if (!sel) {
                        return null;
                    }
                    return {
                        [sel.id]: getComponentContent(sel, `${translationId}.${sel.id}`),
                    };
                }
                case 'contentChunk': {
                    const chunks = [];
                    (_x = c.content) === null || _x === void 0 ? void 0 : _x.chunks.forEach((catalogueChunk, chunkIndex) => {
                        const chunk = {};
                        catalogueChunk.forEach((component) => {
                            chunk[component.id] = getComponentContent(component, `${translationId}.${chunkIndex}.${component.id}`);
                        });
                        chunks.push(chunk);
                    });
                    return chunks;
                }
                default: {
                    return c.content;
                }
            }
        }
        if (cmps) {
            cmps.forEach((c) => {
                const content = getComponentContent(c, `${translationIdBase}.${c.id}`);
                if (content) {
                    components[c.id] = content;
                }
            });
        }
        return components;
    }
    return jsonItem;
}
exports.parseRawItemData = parseRawItemData;
function handlePriceVariants(priceVariants) {
    if (!priceVariants) {
        return {};
    }
    const p = {};
    priceVariants.forEach((pV) => {
        p[pV.identifier] = pV.price;
    });
    return p;
}
function handlePropertiesTableSection(section) {
    const properties = {};
    section === null || section === void 0 ? void 0 : section.properties.forEach(({ key, value }) => (properties[key] = value));
    return {
        title: section === null || section === void 0 ? void 0 : section.title,
        properties,
    };
}
function handleSubscriptionPlan(plan) {
    function handleTier(tier) {
        return {
            threshold: tier.threshold,
            price: handlePriceVariants(tier.priceVariants),
        };
    }
    function handlePricing(pricing) {
        var _a;
        return {
            period: pricing.period,
            unit: pricing.unit,
            price: handlePriceVariants(pricing.priceVariants),
            meteredVariables: (_a = pricing === null || pricing === void 0 ? void 0 : pricing.meteredVariables) === null || _a === void 0 ? void 0 : _a.map((m) => {
                var _a;
                return ({
                    id: m.id,
                    identifier: m.identifier,
                    name: m.name,
                    tierType: m.tierType,
                    tiers: (_a = m.tiers) === null || _a === void 0 ? void 0 : _a.map(handleTier),
                });
            }),
        };
    }
    function handlePeriod(period) {
        return {
            id: period.id,
            name: period.name,
            initial: period.initial ? handlePricing(period.initial) : undefined,
            recurring: handlePricing(period.recurring),
        };
    }
    return {
        identifier: plan.identifier,
        name: plan.name,
        periods: plan.periods.map(handlePeriod),
    };
}
