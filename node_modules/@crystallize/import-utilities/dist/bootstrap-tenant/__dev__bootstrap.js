"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = require("dotenv");
(0, dotenv_1.config)();
const promises_1 = require("fs/promises");
const bootstrapper_1 = require("./bootstrapper");
async function bootstrap() {
    try {
        const tenantIdentifier = 'dounot-copy';
        const jsonSpec = JSON.parse(await (0, promises_1.readFile)('./json-spec/dounot.json', 'utf-8'));
        console.log(`✨ Bootstrapping ${tenantIdentifier} ✨`);
        const bootstrapper = new bootstrapper_1.Bootstrapper();
        // bootstrapper.config.logLevel = 'verbose'
        bootstrapper.env = 'dev';
        // bootstrapper.config.shapeComponents = 'amend'
        bootstrapper.setTenantIdentifier(tenantIdentifier);
        bootstrapper.setAccessToken(process.env.DEV_CRYSTALLIZE_ACCESS_TOKEN_ID, process.env.DEV_CRYSTALLIZE_ACCESS_TOKEN_SECRET);
        bootstrapper.setSpec(jsonSpec);
        let itemProgress = -1;
        bootstrapper.on(bootstrapper_1.EVENT_NAMES.STATUS_UPDATE, (a) => {
            const i = a.items.progress;
            if (i !== itemProgress) {
                itemProgress = i;
                console.log(new Date(), itemProgress);
            }
        });
        bootstrapper.on(bootstrapper_1.EVENT_NAMES.ERROR, ({ error, areaError, willRetry }) => {
            if (areaError) {
                console.log(JSON.stringify(areaError, null, 1));
            }
            else {
                console.log(JSON.stringify(error, null, 1));
            }
            if (!willRetry) {
                process.exit(1);
            }
        });
        bootstrapper.once(bootstrapper_1.EVENT_NAMES.DONE, function ({ duration }) {
            // ProgressBar.stop()
            console.log(`✓ Done bootstrapping ${tenantIdentifier}. Duration: ${duration}`);
            process.exit(0);
        });
        bootstrapper.start();
    }
    catch (e) {
        console.log(e);
    }
}
bootstrap();
