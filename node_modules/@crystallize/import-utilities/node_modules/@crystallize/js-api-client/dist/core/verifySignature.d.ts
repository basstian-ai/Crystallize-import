import { CrystallizeSignature } from '../types/signature';
export type SimplifiedRequest = {
    url?: string;
    method?: string;
    body?: any;
    webhookUrl?: string;
};
export type CreateAsyncSignatureVerifierParams = {
    sha256: (data: string) => Promise<string>;
    jwtVerify: (token: string, secret: string, options?: any) => Promise<CrystallizeSignature>;
    secret: string;
};
export declare const createAsyncSignatureVerifier: ({ sha256, jwtVerify, secret }: CreateAsyncSignatureVerifierParams) => (signature: string, request: SimplifiedRequest) => Promise<CrystallizeSignature>;
/**
 * @deprecated you should use the `CreateAsyncSignatureVerifierParams` type instead
 */
export type CreateSignatureVerifierParams = {
    sha256: (data: string) => string;
    jwtVerify: (token: string, secret: string, options?: any) => CrystallizeSignature;
    secret: string;
};
/**
 * @deprecated you should use the `createAsyncSignatureVerifier` function instead
 */
export declare const createSignatureVerifier: ({ sha256, jwtVerify, secret }: CreateSignatureVerifierParams) => (signature: string, request: SimplifiedRequest) => CrystallizeSignature;
