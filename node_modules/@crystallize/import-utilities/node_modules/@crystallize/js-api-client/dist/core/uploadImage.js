"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadToTenant = uploadToTenant;
exports.handleImageUpload = handleImageUpload;
const fs = __importStar(require("fs"));
const mime = __importStar(require("mime-lite"));
const MUTATION_UPLOAD_FILE = `#graphql
mutation UPLOAD_FILE ($tenantId: ID!, $filename: String!, $mimeType: String!) {
    fileUpload {
        generatePresignedRequest(
            tenantId: $tenantId
            filename: $filename
            contentType: $mimeType
            type: MEDIA
        ) {
            url
            fields {
                name
                value
            }
        }
    }
}`;
async function uploadToTenant({ id, mimeType, filename, buffer, stats, apiClient, }) {
    const signedRequestResult = await apiClient.pimApi(MUTATION_UPLOAD_FILE, {
        tenantId: id,
        filename,
        mimeType,
    });
    const payload = signedRequestResult.fileUpload.generatePresignedRequest;
    const formData = new FormData();
    payload.fields.forEach((field) => {
        formData.append(field.name, field.value);
    });
    formData.append('file', new Blob([buffer]));
    const response = await fetch(payload.url, {
        method: 'POST',
        body: formData,
    });
    return response.status === 201 ? formData.get('key') : false;
}
async function handleImageUpload(imagePath, apiClient, tenantId) {
    if (!imagePath) {
        return 'No image path provided';
    }
    const extension = imagePath.split('.').pop();
    const mimeType = mime.getType(extension);
    const filename = imagePath.split('T/').pop();
    if (!mimeType) {
        return 'Could not find mime type for file. Halting upload';
    }
    if (!mimeType.includes('image')) {
        return 'File is not an image. Halting upload';
    }
    const stats = fs.statSync(imagePath);
    const buffer = fs.readFileSync(imagePath);
    const data = {
        mimeType,
        filename,
        stats,
        buffer,
        apiClient,
    };
    const tId = apiClient.config.tenantId ?? tenantId;
    if (!tId) {
        return 'No tenant id provided';
    }
    const imageKey = await uploadToTenant({
        id: tId,
        ...data,
    });
    return imageKey;
}
//# sourceMappingURL=uploadImage.js.map