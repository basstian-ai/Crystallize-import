export * from './core/client';
export * from './core/massCallClient';
export * from './core/navigation';
export * from './core/hydrate';
export * from './core/catalogue';
export * from './core/order';
export * from './core/search';
export * from './core/subscription';
export * from './core/customer';
export * from './core/pricing';
export * from './core/verifySignature';
export * from './types/product';
export * from './types/order';
export * from './types/payment';
export * from './types/components';
export * from './types/search';
export * from './types/subscription';
export * from './types/address';
export * from './types/customer';
export * from './types/signature';
export * from './types/pricing';
export * from './core/uploadImage';
export * from './core/editCart';
export declare const CrystallizeClient: import("./core/client").ClientInterface;
export declare const CrystallizeNavigationFoldersFetcher: import("./core/navigation").TreeFetcher;
export declare const CrystallizeNavigationTopicsFetcher: import("./core/navigation").TreeFetcher;
export declare const CrystallizeHydraterByPaths: import("./core/hydrate").ProductHydrater;
export declare const CrystallizeHydraterBySkus: import("./core/hydrate").ProductHydrater;
export declare const CrystallizeOrderPusher: (intentOrder: import("./types/order").CreateOrderInputRequest) => Promise<import("./types/order").OrderCreatedConfirmation>;
export declare const CrystallizeCreateOrderPaymentUpdater: (orderId: string, intentOrder: import("./types/order").UpdateOrderInputRequest) => Promise<import("./types/order").OrderUpdatedConfirmation>;
export declare const CrystallizeCatalogueFetcher: <T>(query: any, variables?: import("./core/client").VariablesType) => Promise<T>;
export declare const CrystallizeSearcher: {
    search: (language: string, nodeQuery: any, filter?: import("./types/search").CatalogueSearchFilter, orderBy?: import("./types/search").CatalogueSearchOrderBy, pageInfo?: any, limit?: {
        perPage?: number;
        total?: number;
    }, cursors?: {
        before?: string;
        after?: string;
    }) => AsyncIterableIterator<any>;
};
export declare const CrystallizeOrderFetcherById: (orderId: string, onCustomer?: any, onOrderItem?: any, extraQuery?: any) => Promise<import("./types/order").Order>;
export declare const CrystallizeOrderFetcherByCustomerIdentifier: (customerIdentifier: string, extraQueryArgs?: any, onCustomer?: any, onOrderItem?: any, extraQuery?: any) => Promise<{
    pageInfo: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor: string;
        endCursor: string;
        totalNodes: number;
    };
    orders: import("./types/order").Order[];
}>;
export declare const CrystallizeSubscriptionContractManager: {
    create: (intentSubsctiptionContract: import("./types/subscription").CreateSubscriptionContractInputRequest, extraResultQuery?: any) => Promise<any>;
    update: (id: string, intentSubsctiptionContract: import("./types/subscription").UpdateSubscriptionContractInputRequest, extraResultQuery?: any) => Promise<any>;
    createSubscriptionContractTemplateBasedOnVariantIdentity: (path: string, productVariantIdentifier: {
        sku?: string;
        id?: string;
    }, planIdentifier: string, periodId: string, priceVariantIdentifier: string, language?: string) => Promise<Omit<{
        tenantId: string;
        status: {
            price: number;
            currency: string;
            activeUntil: Date;
            renewAt: Date;
        };
        customerIdentifier: string;
        item: {
            name: string;
            sku: string;
            meta?: {
                value: string;
                key: string;
            }[] | undefined;
            imageUrl?: string | undefined;
        };
        initial?: {
            price: number;
            meteredVariables: {
                id: string;
                tierType: import("json-to-graphql-query").EnumType;
                tiers: {
                    price: number;
                    currency: string;
                    threshold: number;
                }[];
            }[];
            currency: string;
        } | undefined;
        recurring?: {
            price: number;
            meteredVariables: {
                id: string;
                tierType: import("json-to-graphql-query").EnumType;
                tiers: {
                    price: number;
                    currency: string;
                    threshold: number;
                }[];
            }[];
            currency: string;
        } | undefined;
        addresses?: {
            type: import("json-to-graphql-query").EnumType;
            firstName?: string | undefined;
            middleName?: string | undefined;
            lastName?: string | undefined;
            street?: string | undefined;
            street2?: string | undefined;
            streetNumber?: string | undefined;
            postalCode?: string | undefined;
            city?: string | undefined;
            state?: string | undefined;
            country?: string | undefined;
            phone?: string | undefined;
            email?: string | undefined;
            meta?: {
                key: string;
                value?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        payment?: {
            provider: import("json-to-graphql-query").EnumType;
            custom?: {
                properties?: {
                    property: string;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
            klarna?: {
                status?: string | undefined;
                klarna?: string | undefined;
                orderId?: string | undefined;
                recurringToken?: string | undefined;
                merchantReference1?: string | undefined;
                merchantReference2?: string | undefined;
                metadata?: string | undefined;
            } | undefined;
            stripe?: {
                stripe?: string | undefined;
                orderId?: string | undefined;
                metadata?: string | undefined;
                subscriptionId?: string | undefined;
                customerId?: string | undefined;
                paymentMethod?: string | undefined;
                paymentMethodId?: string | undefined;
                paymentIntentId?: string | undefined;
            } | undefined;
            paypal?: {
                paypal?: string | undefined;
                orderId?: string | undefined;
                metadata?: string | undefined;
                subscriptionId?: string | undefined;
                invoiceId?: string | undefined;
            } | undefined;
            cash?: {
                cash?: string | undefined;
            } | undefined;
        } | undefined;
        subscriptionPlan?: {
            identifier: string;
            periodId: string;
        } | undefined;
    }, "tenantId" | "status" | "addresses" | "payment" | "customerIdentifier">>;
    createSubscriptionContractTemplateBasedOnVariant: (variant: import("./types/product").ProductVariant, planIdentifier: string, periodId: string, priceVariantIdentifier: string) => Promise<Omit<{
        tenantId: string;
        status: {
            price: number;
            currency: string;
            activeUntil: Date;
            renewAt: Date;
        };
        customerIdentifier: string;
        item: {
            name: string;
            sku: string;
            meta?: {
                value: string;
                key: string;
            }[] | undefined;
            imageUrl?: string | undefined;
        };
        initial?: {
            price: number;
            meteredVariables: {
                id: string;
                tierType: import("json-to-graphql-query").EnumType;
                tiers: {
                    price: number;
                    currency: string;
                    threshold: number;
                }[];
            }[];
            currency: string;
        } | undefined;
        recurring?: {
            price: number;
            meteredVariables: {
                id: string;
                tierType: import("json-to-graphql-query").EnumType;
                tiers: {
                    price: number;
                    currency: string;
                    threshold: number;
                }[];
            }[];
            currency: string;
        } | undefined;
        addresses?: {
            type: import("json-to-graphql-query").EnumType;
            firstName?: string | undefined;
            middleName?: string | undefined;
            lastName?: string | undefined;
            street?: string | undefined;
            street2?: string | undefined;
            streetNumber?: string | undefined;
            postalCode?: string | undefined;
            city?: string | undefined;
            state?: string | undefined;
            country?: string | undefined;
            phone?: string | undefined;
            email?: string | undefined;
            meta?: {
                key: string;
                value?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        payment?: {
            provider: import("json-to-graphql-query").EnumType;
            custom?: {
                properties?: {
                    property: string;
                    value?: string | undefined;
                }[] | undefined;
            } | undefined;
            klarna?: {
                status?: string | undefined;
                klarna?: string | undefined;
                orderId?: string | undefined;
                recurringToken?: string | undefined;
                merchantReference1?: string | undefined;
                merchantReference2?: string | undefined;
                metadata?: string | undefined;
            } | undefined;
            stripe?: {
                stripe?: string | undefined;
                orderId?: string | undefined;
                metadata?: string | undefined;
                subscriptionId?: string | undefined;
                customerId?: string | undefined;
                paymentMethod?: string | undefined;
                paymentMethodId?: string | undefined;
                paymentIntentId?: string | undefined;
            } | undefined;
            paypal?: {
                paypal?: string | undefined;
                orderId?: string | undefined;
                metadata?: string | undefined;
                subscriptionId?: string | undefined;
                invoiceId?: string | undefined;
            } | undefined;
            cash?: {
                cash?: string | undefined;
            } | undefined;
        } | undefined;
        subscriptionPlan?: {
            identifier: string;
            periodId: string;
        } | undefined;
    }, "tenantId" | "status" | "addresses" | "payment" | "customerIdentifier">>;
};
export declare const CrystallizeCustomerManager: {
    create: (intentCustomer: import("./types/customer").CreateCustomerInputRequest, extraResultQuery?: any) => Promise<any>;
    update: (identifier: string, intentCustomer: import("./types/customer").UpdateCustomerInputRequest, extraResultQuery?: any) => Promise<any>;
};
